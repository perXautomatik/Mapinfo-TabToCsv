
Include "MapBasic.def"
include "Menu.def"
Include "tabellInsammlare.def"
include "CommonLib\commonLib1.def"

Declare sub DO2_readCurrentState()
Declare Sub DO2_1_newSocken(byVal nSocken as string)
Declare sub DO4_Mutations()

Declare sub processor_1Pre
Declare sub processor_2SockenRead

Declare sub Processor_5StoreToHelaSolen()

Declare sub Do2_LoadLatestObjId()

Declare sub loadTestData()
Declare Sub Main()
Declare sub SaveAnvndaReningar 
Declare sub UObjCreator()

global
G_workDir,G_socken as string, G_rebuild,G_debugg as logical, G_anvndaReningar(),G_ProgressRange,G_Progress,G_senastObjectID, G_senastTid,G_starttime as integer

sub processor_2SockenRead
	call Do2_LoadLatestObjId()
	
	call increment(G_Progress,G_ProgressRange,G_starttime)
end sub

Sub Main()

	onError goto TableValidator
		run application applicationdirectory$() & "LoadTableData.MBX"
	onError goto 0

	run command("Set " + EPSGToCoordSysString$("EPSG::3022"))  'EPSG::3022 r RT90 0 gon, ESPG::3015 r sweref
	
	dim tablenames(1) as string tablenames(1) = "fastighet_yta" 'call closeAllBut(tableNames)

	G_debugg = true G_rebuild = false 
	G_senastTid = 0 
	G_socken = "" 
	
	onError goto TableValidator
		run application applicationdirectory$() & "TableValidator.MBX"
	onError goto 0
	
	onError goto PreProcesses
		run application applicationdirectory$() & "PreProcesses.MBX"
	onError goto 0
	
	onError goto processor_2SockenRead call openSingletable("socknarOfiltrerade") fetch first from socknarOfiltrerade G_ProgressRange = tableinfo(socknarOfiltrerade,tab_info_nRows) G_Progress = 0 G_starttime = timer() ProgressBar "processor_2SockenRead...." & G_ProgressRange & " items" calling processor_2SockenRead	Range G_ProgressRange		onError goto 0
	
	if tableInfo("sockenTabell",TAB_INFO_NROWS) <> 0 then
		onError goto MainLoop
			run application applicationdirectory$() & "MainLoop.MBX"
		onError goto 0
	else
		print "sockenTabell Rader_" & tableInfo("sockenTabell",TAB_INFO_NROWS)
	end if
	

	onError goto Processor_5StoreToHelaSolen call createRessultTableX("HelaSolen",applicationdirectory$() & "\HelaSolen.TAB") fetch first from socknarOfiltrerade	G_ProgressRange = tableInfo("socknarOfiltrerade",TAB_INFO_NROWS) 		if G_ProgressRange <> 0 then				G_starttime = timer() 			G_Progress = 0 			ProgressBar "Processor_5StoreToHelaSolen_LoadingIntoTable...." & G_ProgressRange & " items" 			Calling Processor_5StoreToHelaSolen			Range G_ProgressRange				call SilenttidsSummering(G_Progress,G_ProgressRange,G_starttime,"Processor_5StoreToHelaSolen")		end if 	commit table HelaSolen onError goto 0

	onError goto PostProcesses
		run application applicationdirectory$() & "PostProcesses.MBX"
	onError goto 0
	
exit sub	
	TableValidator: print "TableValidator" print error$()	    end program
	PreProcesses: print "PreProcesses" print error$()	    end program
	MainLoop: print "MainLoop" print error$()	    end program
	PostProcesses: print "PostProcesses" print error$()	    end program
	processor_2SockenRead: print "processor_2SockenReadError" print error$()	    end program
	Processor_5StoreToHelaSolen:	print "Processor_5StoreToHelaSolenError"	end program

End Sub

sub Processor_5StoreToHelaSolen()
	
	onError goto InsertERror
		if socknarOfiltrerade.sockenx <> "" then 
		call insertCommonColumnsFromTableXintoY(socknarOfiltrerade.sockenx & "ressultat","HelaSolen")
		end if
	onError goto 0
	fetch next from socknarOfiltrerade
	
	call increment(G_Progress,G_ProgressRange,G_starttime)

exit sub
insertError:
	print "[ERROR_Processor_5StoreToHelaSolen]" & error$() & socknarOfiltrerade.sockenx
	end program
End Sub

sub Do2_LoadLatestObjId()
	'call columnAsStringArray("gemensamma","kommentarer",gerdinsID)
	'SqlGenWhereColIsNotAny("objektid", gerdinsID) & 
	'why DO we need to populate the socken ref table like this everytime rather than using a premade
	'if socken is 'then ""'then ""'then ""'else
	'populates a single row table, if it fits the conditions, else it filters away unfit ressults
	
	dim filePath,tempsTring,gerdinsID(1),query as string ,i,x,returnInt as integer	,debugg as logical debugg = false	x = timer() returnInt = 0 if debugg then print "---------------------------boutToReadReningar-----" end if
	
	tempstring = socknarOfiltrerade.SockenX & "ressultat"  'if sockenNamnRessultat exsists, then true, else false
	if tempstring <> "ressultat" then
		if openTableAndConfirm(tempstring) then onError goto exitProg 
			
			query = "select max(objektid) " & " from " & tempstring & " " & " into LatestObjectX" run command query fetch first from LatestObjectX	onError goto 0
			if LatestObjectX.col1 > ifOpenFetchFirstCol11Asinteger("LatestObjectID") then	
				call closeSingleTable("LatestObjectID")	
				select * from LatestObjectX into LatestObjectID	call görTillBastabell("LatestObjectID")	else
				call closeSingleTable("LatestObjectX") end if onError goto 0
		else
			tempstring = socknarOfiltrerade.SockenX
			if tempstring <> "" then
				Insert Into sockenTabell (COL1) values (tempstring) 
			end if
		end if
		fetch next from socknarOfiltrerade
	end if

	if	debugg then print "---------------------------sockenTabell.col1-----" & sockenTabell.SockenX end if exit sub exitProg:	print query & "||" & error$()	end program

	call görTillBasTabell("sockenTabell")
end sub

sub SaveAnvndaReningar
	'sparar G_anvndaReningar 'print Format$((tableInfo(AnvndaReningarsHash,tab_info_nRows)/tableInfo(ArrayTable,tab_info_nRows)), "%") & " success save anvnda reningar" 'tmmer utskriftobjekt arrayn
	dim x as integer
	
	if ubound(G_anvndaReningar) <> 0 then
		Create Table "ArrayTable" (Flt1 Integer) file TempFileName$("") TYPE NATIVE Charset "WinDOwsLatin1"
		
		for x=1 to ubound(G_anvndaReningar) Insert Into ArrayTable Values (G_anvndaReningar(x)) next
		
		call closeSingleTable("AnvndaReningarsHash") 
		onError goto queryError
		dim query as string
		query = "select Anslutna_fastigheter_1,CentroidY(Obj),CentroidX(obj) from reningIhopslagen where rowIndex = any (select Col1 from ArrayTable) into AnvndaReningarsHash"
		run command query
		onError goto 0
		
		commit table AnvndaReningarsHash as ApplicationDirectory$() & "AnvndaReningarsHash.tab" drop table ArrayTable  print "DOne!"
	else
		print "noReningar to save"
	end if

exit sub queryError: print "[ERROR_SaveAnvndaReningar] " & error$() end sub
