
Include "MapBasic.def"
include "Menu.def"
Include "tabellInsammlare.def"
include "commonLib\commonLib1.def"
include "postProcesses.def"

declare sub förberedAvslut()
declare sub readCurrentSockenState(användaReningar() as integer)
declare Sub Main()
declare sub readCurrentSockenState(användaReningar() as integer)
declare sub sockenProcessor()
declare sub saveProgress(utskriftsObjekt() as utskriftsObjekt,användaReningar() as integer)
declare sub förberedAvslut()
declare Sub NewSocken(byVal nSocken as string,EnskiltObjekt() as enskiltObjekt,reningsObjekt() as reningsObjekt,swerefObjekt() as swerefObjekt)
declare sub inläsning(fastighetsobjekt() as FastighetsObjekt,tempAlias3() as enskiltObjekt,tempAlias2() as reningsobjekt,tempAlias1() as swerefObjekt)

global workDir as string

'todo: organize code to be more obeus of difference between main and tabellinsammlare
' ? 	maybe tabellisnammlare actually should only keep long stuffing methods like defining table strucutures 
' 		a third module should be made to take care of helper functions for the main,
'		maybe an already exsisting method like module like pivotizer....
'		fourth module for end effects.

Sub Main()
	'empty message
	print Chr$(12)
	
	workdir = "C:\Users\crbk01\OneDrive - Region Gotland\Till Github\Mapinfo\MapInfoTabToCsv"
	
	'to make sure the coordinationsystem is the right one
	run command("Set " + EPSGToCoordSysString$("EPSG::3022"))
	
	dim tablenames(1) as string tablenames(1) = "fastighet_yta" call closeAllBut(tableNames)
	
	startTime = timer() iprogressRange = 10 iprogress = 0
	ProgressBar "populatePathTable...." & iProgressRange & " items" Calling populatePathTable Range iProgressRange
	
	'+ tableinfo(antalKörningar,tab_info_nrows) *9
	'if sockentabell is zero, this segment is completely skipped
	'that means that the sockenprogressioncheck has laready bin done in the pathTablePopulation
	iprogressRange = tableinfo(sockenTabell,tab_info_nRows) if iprogressRange <> 0 then				
		redim tablenames(2) tablenames(1) = "enskiltIhopslaget" tablenames(2) = "reningIhopslaget" call tableOpener(tablenames)
	
		startTime = timer() iprogress = 0 ProgressBar "sockenProcessor...." & iProgressRange & " items"
			Calling sockenProcessor
		Range iProgressRange		
	end if
	
	call förberedAvslut() 
	
	call postProcessor()	
	
end sub

sub readCurrentSockenState(användaReningar() as integer)
	dim filePath,tempsTring,gerdinsID(1),query as string ,i,x,returnInt as integer	,debugg as logical debugg = false	x = timer() returnInt = 0 if debugg then print "---------------------------boutToReadReningar-----" end if
	
	call columnAsStringArray("gemensamma","kommentarer",gerdinsID)
	
	fetch first from socknarOfiltrerade
	
	do until eot(socknarOfiltrerade)
		tempstring = socknarOfiltrerade.SockenX & "ressultat"  'if sockenNamnRessultat exsists, then true, else false
	
		if SingletableOpenerConfirmation(tempstring) then onError goto exitProg 
			
			query = "select max(objektid) " & " from " & tempstring & " " & SqlGenWhereColIsNotAny("objektid", gerdinsID) & " into LatestObjectX" run command query fetch first from LatestObjectX	onError goto 0
			if LatestObjectX.col1 > ifOpenFetchFirstCol11Asinteger("LatestObjectID") then	
				call closeIfnotClosed("LatestObjectID")	
				select * from LatestObjectX into LatestObjectID	call görTillBastabell("LatestObjectID")	else
				call closeIfnotClosed("LatestObjectX") end if onError goto 0
		else
			tempstring = socknarOfiltrerade.SockenX Insert Into sockenTabell (COL1) values (tempstring) end if fetch next from socknarOfiltrerade
	loop

	if	debugg then print "---------------------------sockenTabell.col1-----" & sockenTabell.SockenX end if exit sub exitProg:	print query & "||" & error$()	end program
end sub		

sub sockenProcessor()
	dim senasteFastighet,förraSocken,FastighetsBetInput,temp,nSocken,fastighetJustNu as string ,x,runns,användaReningar() as integer ,currentObjectid,endtime,integerX as float ,newSocken as logical ,fastighetsObjekt() as fastighetsobjekt ,swerefObjekt() as swerefObjekt,reningsObjekt() as reningsObjekt ,EnskiltObjekt() as enskiltObjekt ,utskriftsObjekt() as utskriftsObjekt

	starttime = timer() nSocken = sockenTabell.sockenX senasteFastighet = "" currentObjectid = 0 socken = "" runns = 0	x=1
'	end program
	Call newSocken(nSocken,EnskiltObjekt(),reningsObjekt(),swerefObjekt()) runns = timer() - starttime
	
	Select * from fastighet_yta where left$(KIR,InStr(1,KIR," ",)-1) = nSocken group by kir into SorteradFastighet fetch first from SorteradFastighet integerX = iif(tableInfo(SorteradFastighet,TAB_INFO_NROWS)=0,1,tableInfo(SorteradFastighet,TAB_INFO_NROWS))

	call increment(iProgress,iProgressRange,starttime)
	starttime = timer()
	do UNtil EOT(SorteradFastighet)
		fastighetJustNu = SorteradFastighet.kir'	debugg = (fastighetJustNu = "ALA OLLAJVS 1:17")'dim debugg as logical debugg = false if(debugg) then end program end if

		call inläsning(FastighetsObjekt,EnskiltObjekt(),reningsObjekt(),swerefObjekt())'reads selected row from sorteradFastighet

		fetch Next from SorteradFastighet
	loop
	
	endtime = timer()-starttime	print "***************************************************************************************************************************" print (timer()-starttime)/integerX & " tidsenheter| " & endtime & " Totala körningens| "  & runns & " sockengenerering" print "***************************************************************************************************************************"
	
	for x = 1 to ubound(fastighetsObjekt) call tolkning(FastighetsObjekt(x),utskriftsObjekt,användaReningar) next 
	
	call saveProgress(utskriftsObjekt,användaReningar) 'Runns = Runns+1 if(runns = 2) then '	end program end if

	redim utskriftsObjekt(1) redim fastighetsObjekt(1)

	fetch next from sockenTabell
end sub

sub saveProgress(utskriftsObjekt() as utskriftsObjekt,användaReningar() as integer)

	dim query,värden(),påPlatts(),insertinto,fromTable,tablename,filePath, värde(),temp as string
	,x,y,z as integer
	,tempFloat as float

	tableName = Socken & "ressultat"
	filePath = ApplicationDirectory$() + tableName & ".tab"

	call createRessultTableX(tablename,filePath)

	for x=1 to ubound(utskriftsObjekt)
		call genereraSQLVärdeArray(värde, utskriftsObjekt(x))
		if( StringArrayAsString(värde) <> "0,0,0,0,F,0,0,0,0,0,0,0,0" ) then
			query = generateInsertStringWithArray(tableName, värde)
	
			if("Insert Into ressultat () Values ()" <> query) then 'tomt 
				onerror goto queryError
					run command query
				onerror goto 0
			else
				goto queryError
			end if
		else
			goto queryError
		end if	
	next
	
	commit table tableName
	
	'sparar AnvändaReningar
	Create Table "ArrayTable" (Fält1 Integer) file TempFileName$("") TYPE NATIVE Charset "WindowsLatin1"
	for x=1 to ubound(användaReningar)
		Insert Into ArrayTable Values (användaReningar(x))
	next
	
	call closeIfnotClosed("AnvändaReningarsHash")
	
	select Anslutna_fastigheter_1,CentroidY(Obj),CentroidX(obj) from reningIhopslagen where rowIndex = any (select Col1 from ArrayTable) into AnvändaReningarsHash
	
	'print Format$((tableInfo(AnvändaReningarsHash,tab_info_nRows)/tableInfo(ArrayTable,tab_info_nRows)), "%") & " success save använda reningar"
			
	commit table AnvändaReningarsHash as ApplicationDirectory$() & "AnvändaReningarsHash.tab"
	drop table ArrayTable
	redim utskriftsobjekt(1) 'tömmer utskriftobjekt arrayn
	print "done!"
	methodEnd:
exit sub
queryError:
	print "queryError|" & query & "dropping table"
	print error$()
	drop table tableName
	resume methodEnd
end sub

sub förberedAvslut()
	Create table "HelaSolen" (Besöksadress_Adress Char(253),Besöksadress_Postnr Char(253),Besöksadress_Ort Char(253),Besöksadress_Huvudfastighet Char(34),FNR Integer,Verksamhetsutövare_Namn Char(253),Verksamhetsutöv_Person_orgnr Integer,Fakturamottagare_NAMN Char(253),Fakturamottagare_Faktura_ADRESS Char(253),Fakturamottagare_Faktura_POSTNR Char(253),Fakturamottagare_Faktura_POSTOR Char(253),Enhet Char(6),Anteckning Char(253),Aktuell_timavgift Integer,Timdebitering Logical,Objektnamn Char(36),flik_Avloppsänlaggni_Boendetyp Char(15),flik_Avloppsanläggn_Byggnadsår Date,flik_Avloppsa_Besiktningsdatum Date,flik_Avloppsanläg_Beslutsdatum Date,Vatten Char(17),Recipient Char(49),Inventering Char(12),Inventeringsinformation_Datum Date,Inventeringsinformation_Status Char(6),Bedömning Char(15),fliken_Fastigheter Char(34),fliken_FastigheterFNR Integer,PunkttypAB Char(16),Fliken_Koordinater Char(19),fliken_Ärenden Char(13),Anläggningskategori Char(20),besiktningdatum Date,beslutsdatum Date,Anläggningstyp Char(15),Volym_m3 Float,Anl_för_EftR_TöInterv_mån Integer,AnlF_efR_Koordinater_X_o_Y Char(19),PunkttypER Char(20),Anläggning_för_EfterföljRText Char(253),Anläggningskategori_2 Char(19),Anläggning_för_S_Anläggningstyp Char(15),Externt_Tjänsteid Integer,text Char(253),Anläggning_för_Slamav_Volym_m3 Float,Anläggningskategori_3 Char(19),AnlförEfterR_Anläggningstyp Char(15),besiktningdatum_2 Date,beslutsdatum_2 Date,Externt_Tjänsteid2 Integer,Volym_m32 Float,ObjektID Integer,Path Char(253),Diarienummer Char(13),Löpnummer Integer) file workdir & "\HelaSolen.TAB" TYPE NATIVE Charset "WindowsLatin1"
	
	fetch first from socknarOfiltrerade
	do until eot(socknarOfiltrerade)		
		run command("Insert Into HelaSolen Select * From " & socknarOfiltrerade.sockenx & "ressultat")
		fetch next from socknarOfiltrerade
	loop
	
	commit table HelaSolen
	
End Sub

Sub NewSocken(byVal nSocken as string,EnskiltObjekt() as enskiltObjekt,reningsObjekt() as reningsObjekt,swerefObjekt() as swerefObjekt)
		
'		For iLoop = 1 to numtables() 
'			do case tableinfo(iLoop,1)
'				case "enskiltSocken" drop table enskiltSocken
'				case "SockenSweref"	drop table SockenSweref
'				case "ReningSocken"	drop table ReningSocken
'				case else
'			end case
'		Next 
		
		dim sockenTable,sTbl,query,tempstring as string
		,iLoop,x,size as integer
		
							
		print "change " & socken & " to " & nSocken socken = nSocken
		redim tablenames(3) tablenames(1) = nSocken & "Fastigheter" tablenames(2) = "EnskiltIhopslagen" tablenames(3) = "reningIhopslagen" call tableOpener(tablenames) sockenTable = Socken & "Fastigheter"
	
		query = "select " & getColumnsOfTable_asString(tableNames(2)) & ",CentroidX(obj)  & "","" & CentroidY(obj) ""koor""" & " from enskiltIhopslagen where obj within any (select Obj From " & SockenTable & ") group by rowindex into Valtenskilt NoSelect" run command query size = tableInfo(valtenskilt,tab_info_nrows)
		
		fetch first from Valtenskilt
		print socken & " " & size & "valtEnskilt"
			for x=1 to size Redim EnskiltObjekt(x)		
				if (Valtenskilt.Diarienummer<>"MHN") then EnskiltObjekt(x).Diarienummer = DiarieMixedToUnit(Valtenskilt.Diarienummer) end if					
				EnskiltObjekt(x).Fastighet_tillstånd = searchReplace(Valtenskilt.Fastighet_tillstånd,"""","'")
				EnskiltObjekt(x).spatialShift = searchReplace(Valtenskilt.spatialshift,"""","'")
				EnskiltObjekt(x).spatialFastighet = searchReplace(Valtenskilt.spatialFastighet,"""","'")
				EnskiltObjekt(x).Typ_byggnad = searchReplace(Valtenskilt.Typ_byggnad,"""","'")
				EnskiltObjekt(x).Antal_hushåll_tillstånd = searchReplace(Valtenskilt.Antal_hushåll_tillstånd,"""","'")
				EnskiltObjekt(x).Fastighet_rening = searchReplace(Valtenskilt.Fastighet_rening,"""","'")
				EnskiltObjekt(x).Typ_Slamavskiljare = searchReplace(Valtenskilt.Typ_Slamavskiljare,"""","'")
				EnskiltObjekt(x).Storlek_m3 = Valtenskilt.Storlek_m3
				EnskiltObjekt(x).Typ_rening = searchReplace(Valtenskilt.Typ_rening,"""","'")
				EnskiltObjekt(x).Storlek_m2 = Valtenskilt.Storlek_m2
				EnskiltObjekt(x).Typ_sluten_tank = searchReplace(Valtenskilt.Typ_sluten_tank,"""","'")
				EnskiltObjekt(x).Storlek__m3 = Valtenskilt.Storlek__m3
				EnskiltObjekt(x).Beslut_datum = Valtenskilt.Beslut_datum
				EnskiltObjekt(x).Utförd_datum = Valtenskilt.Utförd_datum
				EnskiltObjekt(x).Avgift = val("" & Valtenskilt.Avgift)
				EnskiltObjekt(x).Tillstånd_giltigt_tom = Valtenskilt.Tillstånd_giltigt_tom
				EnskiltObjekt(x).Anteckningar = searchReplace(Valtenskilt.Anteckningar,"""","'")
				EnskiltObjekt(x).kordinater = Valtenskilt.koor
				
				'EnskiltObjekt(x).slamDispDat = 
			fetch next from ValtEnskilt
		next
			
		query = "select " & getColumnsOfTable_asString(tableNames(3)) & ",CentroidX(obj)  & "","" & CentroidY(obj) ""koor""" & " from reningIhopslagen where obj within any (select Obj From " & SockenTable & ") group by rowindex into ValtRening NoSelect" run command query size = tableInfo(valtRening,tab_info_nrows) fetch first from ValtRening
		print socken & " " & size & "reningsObjekt"
		for x=1 to size
			
			Redim reningsObjekt(x)
			reningsObjekt(x).spatialFastighet = valtRening.spatialFastighet
			reningsObjekt(x).spatialShift = valtRening.spatialShift
			reningsObjekt(x).Fastighet_rening = searchReplace(valtRening.Fastighet_rening,"""","'")	
			reningsObjekt(x).Antal_hushåll_rening = iif(val(valtRening.Antal_hushåll_rening & "") <> 0,val(valtRening.Antal_hushåll_rening & ""),1)
			reningsObjekt(x).Reningstyp = searchReplace(valtRening.Reningstyp,"""","'")
			reningsObjekt(x).Storlek_m2 = valtRening.Storlek_m2
			reningsObjekt(x).kordinater = valtRening.koor tempstring = "" & 
			valtRening.Beslut_datum if mixedDateToUnion(tempstring) <> "0" then reningsObjekt(x).Beslut_datum = StringToDate(mixedDateToUnion(tempstring)) else	reningsObjekt(x).Kommentarer = searchReplace(tempString & " " & reningsObjekt(x).Kommentarer,"""","'") end if		tempstring = "" & 
			valtRening.Utförd_datum	if mixedDateToUnion(tempstring) <> "0" then	reningsObjekt(x).utförd_datum = StringToDate(mixedDateToUnion(tempstring)) else	reningsObjekt(x).Kommentarer = searchReplace(tempString & " " & reningsObjekt(x).Kommentarer,"""","'") end if
			reningsObjekt(x).Kommentarer = searchReplace(valtRening.Kommentarer & " " & reningsObjekt(x).Kommentarer,"""","'")
			call getAnslutna(reningsObjekt(x).Anslutna_fastigheter) 
			reningsObjekt(x).rowIndex = valtRening.rowIndex
			
			fetch next from ValtRening
		next
		
		query = "select " & getColumnsOfTable_asString("Fastigheter_sweref") & ",CentroidX(obj)  & "","" & CentroidY(obj) ""koor""" & " from  Fastigheter_sweref where obj within any (select Obj From " & SockenTable & ") group by rowindex into Valtsweref NoSelect" run command query size = tableInfo(Valtsweref,tab_info_nrows)
		
		if size > 0 then fetch first from Valtsweref
			print socken & " " & size & "Valtsweref"
			for x=1 to size
				Redim swerefObjekt(x) 
				swerefObjekt(x).FASTIGHET = searchReplace(Valtsweref.FASTIGHET,"""","'")
				swerefObjekt(x).Fastighet_tillstånd = searchReplace(Valtsweref.Fastighet_tillstånd,"""","'")
				if (Valtsweref.Ärendenr<>"MHN") then swerefObjekt(x).Ärendenr = DiarieMixedToUnit(Valtsweref.Ärendenr) end if
				swerefObjekt(x).Beslut_datum = Valtsweref.Beslut_datum
				swerefObjekt(x).Status = searchReplace(Valtsweref.Status,"""","'")
				swerefObjekt(x).Utskick1_datum = Valtsweref.Utskick1_datum
				swerefObjekt(x).Anteckning = searchReplace(Valtsweref.Anteckning,"""","'")
				swerefObjekt(x).utförddatum = Valtsweref.utförddatum
				swerefObjekt(x).slamhämtning = searchReplace(Valtsweref.slamhämtning,"""","'")
				swerefObjekt(x).Antal_byggnader = Valtsweref.Antal_byggnader
				swerefObjekt(x).kordinater = Valtsweref.koor
				swerefObjekt(x).SpatialFastighet = Valtsweref.SpatialFastighet
	
				fetch next from Valtsweref
			next
		end if
		
	call increment(iProgress,iProgressRange,starttime)		
end sub

'läser in forna sockenfiler, laddar listan med använda reningar.
'rening bör inte skapas igen föräns vid datumskifte, precis som SockenUtsökning
'inläsning förväntar sig att isNewSocken har genrerat tabeller 
sub inläsning(fastighetsobjekt() as FastighetsObjekt,tempAlias3() as enskiltObjekt,tempAlias2() as reningsobjekt,tempAlias1() as swerefObjekt)
	
	dim FastighetsBetInput as string
		,reningsObjekt() as reningsobjekt
		,enskiltObjekt() as enskiltObjekt
		,swerefObjekt() as swerefObjekt
		,returnState as logical
		,swerefStart,ReningStart,EnskiltStart,objektCreationStart,swerefStop,ReningStop,EnskiltStop,objektCreationStop as float
		,antal as integer
	
	FastighetsBetInput = sorteradFastighet.kir
	if(countFasGenerateUtvald(FastighetsBetInput) <> 0) then
		antal = 0	'	swerefStart = timer()'läser in förgenererad tabell begränsad efter socknen
		antal = SwerefFilterByBet(tempAlias1,FastighetsBetInput,swerefObjekt)'	swerefStop = timer()'	ReningStart = timer()'läser in förgenererad tabell begränsad efter socknen
		antal = antal + ReningsFilterByBet(tempAlias2,FastighetsBetInput,reningsObjekt)'	ReningStop = timer()'	EnskiltStart = timer()'läser in förgenererad tabell begränsad efter socknen
		antal = antal + EnskiltFilterByBet(tempAlias3,FastighetsBetInput,enskiltObjekt)'	EnskiltStop = timer()
		
		dim debugg as logical debugg = false'	debugg = (FastighetsBetInput = "ALA OLLAJVS 1:17")	if(debugg) then	print antal end if
	
		if(antal > 0) then'objektCreationStart = timer()
			call FastighetsObjCreation(fastighetsBetInput,reningsobjekt,fastighetsObjekt,swerefObjekt,enskiltObjekt)'objektCreationStop = timer()
		end if'close table utvaldFastighet
	else
		print "countFasGenerateUtvald("& FastighetsBetInput & ") = 0" 
	end if
	
'	call presentTime(swerefStart,ReningStart, EnskiltStart, objektCreationStart,swerefStop,ReningStop, EnskiltStop, objektCreationStop)
	'call increment(iProgress,iProgressRange,starttime)

End sub


