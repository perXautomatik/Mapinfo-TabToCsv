Include "MapBasic.def"
Include "tabellInsammlare.def"

declare sub attemptSlowInsert(pÂPlatts() as string,v‰rde() as string,er as string)
Dim iProgress,iProgressRange,starttime as integer
,qm as string

sub doReningFirst()
	call openSingleTable("sammanfogadTabell")
	call openSingleTable("todo")
	
	qM = chr$(34)
	dim endtime,totalTid as integer
	dim tidsˆversikt,canceledString as string
	iProgress = 1
	call openSingleTable("reningIhopslagen")
	iProgressRange = tableInfo(reningIhopslagen,8)
	startTime = Timer()
	
	if(tableInfo(sammanfogadTabell,8)> 0) then
		Dialog
		Control StaticText title "ok to analyze, cansle to continue:"
		Control OKButton
		Control Cancelbutton
		 
		If CommandInfo(CMD_INFO_DLG_OK) Then	
			ProgressBar "analysing old...." & iProgressRange & " items"
			      Calling StepProgressReAnalyze
			Range iProgressRange
		end if	
	else
		ProgressBar "Processing...." & iProgressRange & " items"
		      Calling StepProgressRening
		Range iProgressRange
	end if
	
	endTime = Timer()		
	totalTid = endTime-startTime
	tids÷versikt = totalTid & " | " & ((totalTid)/iProgress) & " sec/step"
	canceledString = iProgress & "total: " & tids÷versikt
		
	If CommandInfo(CMD_INFO_STATUS) then
		If iProgress <= iProgressRange then
			Note "ended early, got to step: " & canceledString
		Else
			Note "Complete! total time: " & tids÷versikt
		End If
	Else
	      Note "cancel, got to step: " & canceledString
	End If	

end sub

function compareTwoTablesColumns(table1s as string, table2s as string,columnNamesX() as string, columnNamesY() as string) as integer

	dim returnInteger, i,rowIdTable1,rowIdTable2 as integer
	,TempAlias, table1,table2 as alias
	,tempStringX,TempStringY,query as string
		
	table1 = table1s
	table2 = table2s
	
	returnInteger = 0

	for i = 1 to ubound(columnNamesX)
	onerror goto columnFel
		query = "select " & columnNamesX(i) & " from " & table1 & " where rowid = 1 into joinTable1" 
		run command query
		
		query = "select " & columnNamesY(i) & " from " & table2 & " where rowid = 1 into joinTable2" 
		run command query
		
		fetch first from joinTable1
		fetch first from joinTable2
		
		if not(joinTable1.col1 & "" = joinTable2.col1 & "") then
			returnInteger = returnInteger + 1
		end if
	onerror goto 0
	next

	compareTwoTablesColumns = returnInteger

exit function

columnFel:
	print error$()
	print query
	for i = 1 to ubound(columnNamesX)
		print columnNamesX(i) & "|" & columnNamesY(i)
	next
	
resume next
	
end function

Sub StepProgressReAnalyze
	
	dim Y,begr‰nsningsvariabel,statTime,i,tidsbegr‰nsning,tempInteger,currentId,x,different as integer
	,avslutsvariabel as logical
	,tempString,query,pÂPlatts(),v‰rde(),anslutna()
	,table1ColumnNames() 'reningIhopslagen
	,table2ColumnNames() 'sammanfogadTabell
	as string
	, temporaryAlias1,temporaryAlias2 as string
		
		
	Fetch rec iProgress From reningIhopslagen	
	currentId = reningIhopslagen.rowID
	
	tempstring = reningIhopslagen.kir
	select * from reningIhopslagen where rowid = currentId into currentRow
	select * from sammanfogadTabell where objectNamn = tempString into match 'sammanfogadTabell
	
	temporaryAlias2 = "match" 'sammanfogadTabell
	temporaryAlias1 = "currentRow" 'reningIhopslagen
	
	call knytReningQueryFriendly(table1ColumnNames,table2ColumnNames)
	
	if(tableInfo(match, 8)> 0) then
		if (tableInfo(match, 8)> 1) then
		
			fetch first from match
			do until eot(match)
				different = compareTwoTablesColumns(temporaryAlias1,temporaryAlias2,table1ColumnNames, table2ColumnNames)
					
				fetch next from match
			loop		
		else
			different = compareTwoTablesColumns(temporaryAlias1,temporaryAlias2,table1ColumnNames, table2ColumnNames)
		end if
	end if
		
	redim table1ColumnNames(0)
	redim table2ColumnNames(0)
	
	
	call getColumnsOfTable_intoArray("todo",table1ColumnNames)
	call getColumnsOfTable_intoArray("currentRow",table2ColumnNames)
	
	if different > 0 OR (tableInfo(match, 8) = 0)then
	
		onerror goto queryError
			query = "Insert Into todo (" & arrayAsStringIgnoreEmpty(table1ColumnNames) & ") Select " & arrayAsStringIgnoreEmpty(table2ColumnNames) & " From currentRow DropIndex Auto"
			run command query
		onerror goto 0

	end if
	

	iProgress = iProgress + 1 
	If iProgress <= iProgressRange Then
		if iProgress mod 100 = 0 then
			dim totaltid,tidperEnhet as integer
			
			totaltid = timer() - starttime	
			tidperEnhet = totaltid/iprogress		
			print iProgress & "upskattat: " & ((iprogressRange-iprogress)*tidPerEnhet)/360 & " timmar kvar. " & totaltid\360 & "." & (totaltid mod 360)\60 & "." & (totaltid mod 360) mod 60 & " timmar passerade"
		End If
		
		ProgressBar = iProgress
	Else
		ProgressBar = -1
	End If
		
exit sub
	
queryError:
		print "er: " & error$() & TableOfChoiseKir.kir
		print query
'		tempstring = TableOfChoiseKir.kir
'		insert into errorTable (t1,f1,p1) values (error$(), tempString, query)
'		commit table errorTable
Resume next

End Sub

Sub StepProgressRening
	
	dim Y,begr‰nsningsvariabel,statTime,i,tidsbegr‰nsning,tempInteger,currentId,x as integer
	,avslutsvariabel as logical
	,tempString,query,pÂPlatts(),v‰rde(),anslutna() as string
	
	Fetch rec iProgress From reningIhopslagen	
	
	currentID = reningIhopslagen.rowId 
	
	select * from reningIhopslagen where rowId = currentId into TableOfChoiseKir
		
	redim v‰rde(0)
	redim pÂPlatts(0)
	call knytReningQueryFriendly(v‰rde,pÂPlatts)
	
	reDim anslutna(0)
	call getAnslutna(anslutna)
		
	for x = 1 to ubound(anslutna)
			
		call knyt_sColumn_TillRessultatTabellsColumn_(qM & anslutna(x) & qM,"Besˆksadress_Huvudfastighet",v‰rde,pÂPlatts)'sk‰let till buggen dÂ query blev l‰ngre och l‰ngre fˆr varje iteration
		'hˆll pÂ till och med 592 om denna flyttas ut tillsammans med DoRening, kanske man inte behˆver redimma v‰rde eller pÂPlatts

			query = "Insert Into sammanfogadTabell (" & arrayAsStringIgnoreEmpty(pÂPlatts) & ") Select " & arrayAsStringIgnoreEmpty(v‰rde) & " From TableOfChoiseKir DropIndex Auto"
	
		onError goto queryError	
			run command query
		onError goto 0
	next
				
	iProgress = iProgress + 1
	   
	If iProgress <= iProgressRange Then
		
		if iProgress mod 100 = 0 then
			dim totaltid,tidperEnhet as integer
			
			totaltid = timer() - starttime
			
			tidperEnhet = totaltid/iprogress
			
			print iProgress & "upskattat: " & ((iprogressRange-iprogress)*tidPerEnhet)/360 & " timmar kvar. " & totaltid/360 & " timmar passerade"
		End If
		
		ProgressBar = iProgress
	Else
		ProgressBar = -1
	End If
	
	
exit sub
	
queryError:
		print "er: " & error$() & TableOfChoiseKir.kir
'		tempstring = TableOfChoiseKir.kir
'		insert into errorTable (t1,f1,p1) values (error$(), tempString, query)
'		commit table errorTable
Resume next

End Sub

sub getAnslutna(anslutan() as string)
	dim tempAlias as alias
	dim x,y as integer

	For x=1 to TableInfo(TableOfChoiseKir, TAB_INFO_NCOLS)    		
		tempAlias = "TableOfChoiseKir.col"+str$(x)
 		
 		if ColumnInfo(TableOfChoiseKir, "col"+str$(x), COL_INFO_NAME) like "anslutna_%" then
 			select tempAlias from TableOfChoiseKir into valdKolumn
 			fetch first from valdKolumn
 			
 			if(not(valdKolumn.col1 = "")) then
 				y = ubound(anslutan())+1
 				redim anslutan(y)
 				anslutan(y)= valdKolumn.col1
 			end if
 		end if     		
	Next
	
end sub

sub knytReningQueryFriendly(v‰rde() as string,pÂPlatts() as string)
	
	call knyt_sColumn_TillRessultatTabellsColumn_("Reningstyp","AnlfˆrEfterR_Anl‰ggningstyp",v‰rde,pÂPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Storlek_m2","Anl‰ggning_fˆr_EfTR_Toaletttyp",v‰rde,pÂPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Antal_hushÂll_rening","Anl_fˆr_EftR_TˆInterv_mÂn",v‰rde,pÂPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Beslut_datum","flik_Avloppsanl‰g_Beslutsdatum",v‰rde,pÂPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Utfˆrd_datum","flik_Avloppsa_Besiktningsdatum",v‰rde,pÂPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_(
	"Fastighet_rening & " & qM & "," & qM & " & Anslutna_fastigheter_1 & " & qM & "," & qM & " & Anslutna_fastigheter_2 & " & qM & ","
	 & qM & 
	 " & Anslutna_fastigheter_3 & " & qM & "," & qM & " & Anslutna_fastigheter_4 & " & qM & "," & qM & " & Anslutna_fastigheter_5 & " & qM & ","
	 & qM & 
	 " & Anslutna_fastigheter_6 & " & qM & "," & qM & " & Anslutna_fastigheter_7 & " & qM & "," & qM & " & Anslutna_fastigheter_8 & " & qM & "," 
	 & qM &
	 " & Anslutna_fastigheter_9 & " & qM & "," & qM & " & Anslutna_fastigheter_10"
	 ,"fliken_Fastigheter",v‰rde,pÂPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Kommentarer","Anl‰ggning_fˆr_EfterfˆljRText",v‰rde,pÂPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_(qM & "Efterfˆljande rening"& qM,"PunkttypER",v‰rde,pÂPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Cor","AnlF_efR_Koordinater_X_o_Y",v‰rde,pÂPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("kir","ObjectNamn",v‰rde,pÂPlatts)

end sub
