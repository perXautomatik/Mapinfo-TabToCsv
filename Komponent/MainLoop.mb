Include "MapBasic.def"
include "Menu.def"
include "C:\Users\crbk01\Desktop\WhenOffline\MapInfoTabToCsv\CommonLib\commonLib1.def"


Type ReningsObjekt

	Fastighet_rening as string
	Antal_hushll_rening as integer
	Reningstyp as string
	Storlek_m2 as float
	Beslut_datum as date
	Utfrd_datum as date
	Kommentarer as string
	spatialFastighet as string
	spatialShift as string
	rowIndex as integer
	kordinater as string
	Anslutna_fastigheter() as string

end Type

Type SwerefObjekt

	FASTIGHET as string
	Fastighet_tillstnd as string
	rendenr as string
	Beslut_datum as date
	Status as string
	Utskick1_datum as date
	Anteckning as string
	utfrddatum as date
	slamhmtning as string
	Antal_byggnader as integer	
	kordinater as string
	SpatialFastighet as string
	rowIndex as integer
	
end Type

Type EnskiltObjekt

	Diarienummer as string
	Fastighet_tillstnd as string
	Typ_byggnad as string
	Antal_hushll_tillstnd as string
	Fastighet_rening as string
	Typ_Slamavskiljare as string
	Storlek_m3 as float
	Typ_rening as string
	Storlek_m2 as float
	Typ_sluten_tank as string
	Storlek__m3 as float
	Beslut_datum as date
	Utfrd_datum as date
	Avgift as integer
	Tillstnd_giltigt_tom as date
	Anteckningar as string
	spatialShift as string
	spatialFastighet as string
	kordinater as string
	rowIndex as integer
	
end Type

Type FastighetsObjekt
	
	fastighet as string
	fnr as integer
	
	HuvudSweref as integer
	HuvudRening as integer
	HuvudEnskilt as integer
	
	swerefObjekt as String
	ReningsObjekt as String
	EnskiltObjekt as String
	
	
	adress as string
	postnr as string
	ort as string
	kir as string
			
	namn as string
	personnr as integer

	adressNamn as string
	PostNrNamn as string
	PostortNamn as string
	
End Type

Type UtskriftsObjekt
	
	trovrdighetsIndex as float

	Besksadress_Adress as String
	Besksadress_Postnr as String
	Besksadress_Ort as String
	Besksadress_Huvudfastighet as String
	FNR as integer
	 
	Verksamhetsutvare_Namn as String
	Verksamhetsutv_Person_orgnr as integer
 
	Fakturamottagare_NAMN as String
	Fakturamottagare_Faktura_ADRESS as String
	Fakturamottagare_Faktura_POSTNR as String
	Fakturamottagare_Faktura_POSTOR as String
 
	Enhet as String
	Anteckning as String
	Aktuell_timavgift as integer
	Timdebitering as Logical
	Objektnamn as String

	flik_Avloppsnlaggni_Boendetyp as String
	flik_Avloppsanlggn_Byggnadsr as date
	flik_Avloppsa_Besiktningsdatum as date
	flik_Avloppsanlg_Beslutsdatum as date
	Vatten as String
  
	Recipient as String

	Inventering as String
	Inventeringsinformation_Datum as date
	Inventeringsinformation_Status as String
	Bedmning as String
  
	fliken_Fastigheter as String
	fliken_Fastigheter_FNR as integer

	PunkttypAB as String
	Fliken_Koordinater as String

	fliken_renden as String

	Anlggningskategori as String
	besiktningdatum as date
	beslutsdatum as date
	Anlggningstyp as String
	Volym_m3 as float
	Anl_fr_EftR_TInterv_mn as integer
	AnlF_efR_Koordinater_X_o_Y as String
	PunkttypER as String
	Anlggning_fr_EfterfljRText as String

	Anlggningskategori_2 as String
	Anlggning_fr_S_Anlggningstyp as String
	Externt_Tjnsteid as String
	text as String
	Anlggning_fr_Slamav_Volym_m3 as float
	
	Anlggningskategori_3 as String
	AnlfrEfterR_Anlggningstyp as String
	besiktningdatum_2 as date
	beslutsdatum_2 as date
	Externt_Tjnsteid_2 as String
	Volym_m3_2 as float

	Objektid as integer
	Path as String
	Diarienummer as String
	Lpnummer as integer

	sql as string
	reningsindex as integer
	
end Type

Type TrovrdighetsObjekt
	index as float
	ex as integer
	fx as integer
	rx as integer
End Type

Type AnlggningsObjekt

		Anlggningskategori as string '",: "Char(29)",: "Efterfljande rening\"/\"Slamavskiljare\"/\"Tank\"/\"Extra inventeringsinformation"
		Kartpunkt as string '",: "Char(20)",:PunkttypER "Efterfljande rening\"/\"Slamavskiljare\"/\"Tank\"/\"Extra inventeringsinformation"
		
		besiktningdatum as date ',: "datumä?-MM-DD)",: "utfrandedatum  (rening/beslut/tank)"
		beslutsdatum as date '",: "datumä?-MM-DD)",: "beslutsdatum (rening/beslut/tank)"
		
		Anlggningstyp as string '",: "Char(15)",: "Typ_rening (rening)/Typ_Slamavskiljare (beslut)/Typ_av_tank (Beslut)/(om sweref) \"Klart Vatten"
		
		Volym_m3 as float '",: "float",: "Storlek_m2 (rening)/Storlek_m3  (Beslut)"
		
		Antal_hushll_rening as integer '",: "integer",: "Anl_fr_EftR_TInterv_mn (rening)"
		
		Koordinater as string '",: "Char(19)",: " AnlF_efR_Koordinater_X_o_Y (är infiltration/markädd ?r beägen)/(är ansluten)/(är EXTRA inventeringsinformation ?r beägen)"
				
		Kommentarer as string '",: "Char(253)(ältmaxängd)",: "Anlggning_fr_EfterfljRText (rening/sweref/beslut)"
		
		rendenr as string '",: "integer",: " Externt Tjnsteid (beslut/tank/sweref)"
		
		Typ_byggnad as string '",: "Char(15)",: "Anlggning_fr_S_Anlggningstyp (beslut)"
		
		Status as string '",: "Char(6)",: " text (sweref)"
		
		Slamdispense as date '",: "datumä?-MM-DD)",:AnlfrEfterR_Anlggningstyp ""
		
		Utskick1_datum as date '",: "datumä?-MM-DD)",: "Anlggning_fr_Slamav_Volym_m3  (sweref)"
		
		radNummer as integer

end type

declare function trovrdighetsIndexer(
	swerefobjekt as swerefobjekt,
	reningsobjekt as reningsobjekt,
	enskiltobjekt as enskiltobjekt
	) as float

Declare sub OmObjektSkapaFastighet(FastighetsBetInput as string)

declare sub getAnslutna(anslutan() as string)

Declare Sub Main
Declare sub loadSocken()
Declare sub processor_3PrepMutate()
declare sub createRessultTableX(byval tablename as string, byval filePath as string)
Declare sub processor_4Mutate()
declare sub createFastighetsTable(byval tablename as string, byval filePath as string)
declare sub TabToObjEnskilt(byVal nSocken as string,output() as EnskiltObjekt)
declare sub TabToObjRening(byVal nSocken as string,output() as ReningsObjekt)
declare Sub TabToObSweref(byVal SockenFastigheter as string,output() as swerefObjekt)
Declare sub UobjInitizializer()

declare sub skapaMutationer(en() as enskiltObjekt ,re() as reningsobjekt ,sw() as swerefobjekt,byVal minimumDebt as integer)
Declare sub initializer(reningsTokenObjekt() as reningsobjekt,enskiltsTokenObjekt() as enskiltObjekt,swerefsTokenObjekt() as swerefobjekt)

declare sub enskiltCopyConstruktor(inputX as enskiltObjekt, outputXTable() as enskiltObjekt,byVal outPutItterator as integer)
declare sub reningObjCopyConstr(inputX as ReningsObjekt,OutputTable() as ReningsObjekt,byVal outPutItterator as integer)
declare sub swerefObjektCopyConstr(inputX as swerefObjekt, outputTable() as swerefObjekt,byVal outPutItterator as integer)

declare sub ReningSubsetByIndex(supersetTable() as reningsObjekt, indexArray() as string,OutputTable() as reningsObjekt)
declare sub EnskiltSubsetByIndex(supersetTable() as EnskiltObjekt,indexArray() as String,OutputTable() as EnskiltObjekt)
declare sub SwerefSubsetByIndex(supersetTable() as swerefObjekt, indexArray() as string,OutputTable() as swerefObjekt)

declare function getMain(inputString as string, output() as string) as integer

declare sub utskrivningsobjektsKonstruktor(
		sO() as swerefobjekt,
		rO() as reningsObjekt,
		eO() as enskiltobjekt
	)
	
declare sub saveSockenProgress(socken as string)

global 
G_workDir,G_socken as string,
G_rebuild,G_debugg as logical,
G_ProgressRange,G_Progress,G_senastObjectID, 
G_senastTid,G_anvndaReningar(),G_starttime as integer

,G_reningsObjekt() as reningsObjekt , G_swerefObjekt() as swerefObjekt, G_EnskiltObjekt() as EnskiltObjekt

Sub Main()
	G_debugg = true G_rebuild = false 
	G_senastTid = 0 
	G_socken = "" 
	
	fetch first from sockentabell DO Until EOT(sockentabell)
		dim tableName,filePath,fastighetsObjektsTabell as string 

		onError goto genSortFa G_socken = sockenTabell.sockenX call opensingletable("fastighet_yta") dim tempQuery as string
		tempQuery = "Select * from fastighet_yta where left$(KIR,InStr(1,KIR,"" "",)-1) = " & Chr$(34) & G_socken & Chr$(34) &
		" AND kir <> """" group by kir into SorteradFastighet" run command tempQuery onError goto 0
		
        onError goto LoadSocken call loadSocken() onError goto 0
		onError goto createFastighetsTable fastighetsObjektsTabell = G_socken & "fastighetsObjekt" 		filePath = ApplicationDirectory$() + fastighetsObjektsTabell & ".tab"  		call createFastighetsTable(fastighetsObjektsTabell,filePath) onError goto 0
		onError goto processor_3PrepMutate G_ProgressRange = tableInfo(SorteradFastighet,TAB_INFO_NROWS) if G_ProgressRange <> 0 then	G_starttime = timer() G_Progress = 0 fetch first from SorteradFastighet ProgressBar "processor_3PrepMutate...." & G_ProgressRange & " items" Calling processor_3PrepMutate Range G_ProgressRange	call SilenttidsSummering(G_Progress,G_ProgressRange,G_starttime,"processor_3PrepMutate") end if onError goto 0	
		onError goto processor_4Mutate  		tableName = "sockenRessultat" filePath = ApplicationDirectory$() + tableName & ".tab" call createRessultTableX(tablename,filePath)	 		G_ProgressRange = tableInfo(fastighetsObjektsTabell,TAB_INFO_NROWS) if G_ProgressRange <> 0 then	G_starttime = timer() G_Progress = 1 fetch first from fastighetsObjektsTabell 		ProgressBar "processor_4Mutate...." & G_ProgressRange & " items" Calling processor_4Mutate Range G_ProgressRange	call SilenttidsSummering(G_Progress,G_ProgressRange,G_starttime,"processor_4Mutate") end if onError goto 0 		
		onError goto saveSockenProgress	if tableInfo("sockenRessultat",TAB_INFO_NROWS) <> 0 then	call saveSockenProgress(G_socken) else	goto saveSockenProgress	end if	onError goto 0 'Runns = Runns+1 if(runns = 2) then '	end program	
	fetch next from sockentabell loop
	
exit sub
		LoadSocken:	print "LoadSockenError"	print error$()	    end program
		createFastighetsTable: print "processor_1PreError" print error$()	    end program
		processor_3PrepMutate:	print "processor_3PrepMutateError"	print error$()	    end program
		processor_4Mutate:	print "processor_4MutateError"	print error$()	    end program
		saveSockenProgress: print "[ERROR_saveSockenProgressError] 0 objekts " & G_socken print error$()	    end program
			genSortFa:	print "selectionError " & tempQuery	print error$()	end program
end sub

sub loadSocken()
'rewrite so that progressbar can be visualized in this method, 'was thinking that maybe a case division, 'DOes case work with variables?	it seems like it DOes in fact work ' but maybe not neccessary		
	dim CurrentSocken,sTbl,tempstring as string
	,iLoop,tempinterger as integer 

	
	if G_socken <> "" then
		dim tableNames(1) as string
		redim tablenames(4) 
		print "change to " & G_socken
		
		CurrentSocken = G_socken & "Fastigheter" 
		tablenames(1) = CurrentSocken 
		tablenames(2) = "EnskiltIhopslagen"
		tablenames(3) = "reningIhopslagen"  
		tablenames(4) = "Fastigheter_sweref"
		call tableOpener(tablenames)
		G_starttime = timer() 
		
		Call TabToObjRening(CurrentSocken,G_ReningsObjekt) 'tempinterger = UBound(G_reningsObjekt()) call SilenttidsSummering(tempinterger,tempinterger,G_starttime,"TabToObjRening") G_starttime = timer() 
		Call TabToObjEnskilt(CurrentSocken,G_EnskiltObjekt) 'tempinterger = ubound(G_EnskiltObjekt) call SilenttidsSummering(tempinterger,tempinterger,G_starttime,"TabToObjEnskilt") G_starttime = timer()
		Call TabToObSweref(CurrentSocken,G_SwerefObjekt) 'tempinterger = ubound(G_swerefObjekt) call SilenttidsSummering(tempinterger,tempinterger,G_starttime,"TabToObSweref")
	end if
	
end sub

sub createFastighetsTable(byval tablename as string, byval filePath as string)

	onError goto noTable 
		close table tablename 
	onError goto 0
	print "{Creating " & tablename
	onError goto creationError
	dim query as string
		query = "Create Table " & tableName & " (adress	Char(253),postnr	Char(253),ort Char(253),fastighet	Char(34),fnr integer,HuvudSweref integer,HuvudRening integer,HuvudEnskilt integer,swerefobjekt	Char(253),reningsobjekt	Char(253),enskiltObjekt	Char(253)) file "& chr$(34) & filePath & chr$(34)
		run command query 
		Create Map For tablename CoordSys Earth Projection 1, 104
	onError goto 0
	
exit sub
	creationError:
	print "creationError" & error$()
	print query
	end program
	
	noTable:
	resume next 
end sub

sub ReningSubsetByIndex(supersetTable() as reningsObjekt, indexArray() as string,OutputTable() as reningsObjekt)

	dim z,x,y,size as integer
	size = ubound(supersetTable) y = 1 

	onError goto CommandError	
		if size > 0 then for x=1 to size
			found: for z=1 to ubound(indexArray) if (val(indexArray(z)) <> 0 AND (indexArray(z) <> "0")) then
			
			if((supersetTable(x).rowindex & "" = indexArray(z))) then
				call reningObjCopyConstr(supersetTable(x),outputTable(),y) y = y + 1 indexArray(z) = 0 goto found
			end if end if next next
		else
			goto CommandError
		end if
	onError goto 0

exit function
	CommandError: note "[ERROR] @ reningSubsetByIndex _size" & size & "_" & Error$() end program

end sub

sub EnskiltSubsetByIndex(supersetTable() as EnskiltObjekt,indexArray() as String,OutputTable() as EnskiltObjekt)
	dim z,x,y,size as integer
	size = ubound(supersetTable) y = 1 

	onError goto CommandError	
		if size > 0 then for x=1 to size
			found: for z=1 to ubound(indexArray) if (val(indexArray(z)) <> 0 AND (indexArray(z) <> "0")) then
			
			if((supersetTable(x).rowindex & "" = indexArray(z))) then
				call enskiltCopyConstruktor(supersetTable(x),outputTable(),y) y = y + 1 indexArray(z) = 0 goto found
			end if end if next next
		else
			goto CommandError
		end if
	onError goto 0

exit function
	CommandError: note "[ERROR] @ EnskiltSubsetByIndex _size" & size & "_" & Error$() end program
end sub

sub SwerefSubsetByIndex(supersetTable() as swerefObjekt, indexArray() as string,OutputTable() as swerefObjekt)

	dim z,x,y,size as integer
	size = ubound(supersetTable) y = 1 

	onError goto CommandError	
		if size > 0 then for x=1 to size
			found: for z=1 to ubound(indexArray) if (val(indexArray(z)) <> 0 AND (indexArray(z) <> "0")) then
			
			if((supersetTable(x).rowindex & "" = indexArray(z))) then
				call swerefObjektCopyConstr(supersetTable(x),outputTable(),y) y = y + 1 indexArray(z) = 0 goto found
			end if end if next next
		else
			goto CommandError
		end if
	onError goto 0

exit function
	CommandError: note "[ERROR] @ swerefSubsetByIndex _size" & size & "_" & Error$() end program
end sub

sub UobjInitizializer()

	dim ensk() as enskiltobjekt,ren() as reningsobjekt,sweref() as swerefobjekt,inputString,RenObjIndex(),EnObjIndex(),SweObjIndex() as string,fastighetsObjekt as alias,ignore as integer

	fastighetsObjekt = G_socken & "fastighetsObjekt.reningsobjekt" inputString = fastighetsObjekt ignore = getMain(inputString, RenObjIndex())
	fastighetsObjekt = G_socken & "FastighetsObjekt.enskiltObjekt" inputString = fastighetsObjekt ignore = getMain(inputString, EnObjIndex())
	fastighetsObjekt = G_socken & "FastighetsObjekt.swerefobjekt" inputString = fastighetsObjekt ignore = getMain(inputString, SweObjIndex())

	call ReningSubsetByIndex(G_reningsobjekt,RenObjIndex,ren)
	call EnskiltSubsetByIndex(G_enskiltobjekt,EnObjIndex,ensk)
	call SwerefSubsetByIndex(G_swerefObjekt,SweObjIndex,sweref)

	'skapa muttationer organiserar om arrayna om s behvs
	dim before as integer
	before = ubound(ren) + ubound(ensk) + ubound(sweref)
	if (ubound(ren) > 1 OR ubound(ensk) > 1 OR ubound(sweref) > 1) then
		call skapaMutationer(ensk,ren,sweref,1) 
	end if
	
	if (before <> ubound(ren) + ubound(ensk) + ubound(sweref))
		then print "WARNING before:" & before & " after_ " & ubound(ren) + ubound(ensk) + ubound(sweref)
	end if
		
	'utskriftskonstruktor frvntar sig att ingen av objekten har 0 som rowindex, alts, d blir det tomt.
	if (ubound(ren) < 1 OR ubound(ensk) < 1 OR ubound(sweref) < 1) then
		call initializer(ren,ensk,sweref)
	end if
	call utskrivningsobjektsKonstruktor(sweref,ren,ensk)
		
end sub

sub processor_4Mutate()
	onError goto UobjInitizializer 
		dim tempALias as alias 
		
		call UobjInitizializer()
	
		tempAlias = G_socken & "fastighetsObjekt"
		call increment(G_Progress,G_ProgressRange,G_starttime)	
	fetch next from tempAlias	onError goto 0
exit sub
	UobjInitizializer: print error$() end program
end sub

sub processor_3PrepMutate()
 'initializing global vars? senasteFastighet = "" currentObjectid = 0 socken = "" runns = 0	x=1'	end program 'insert into Pathtable (tablePath,TableName) values (Tempstring, "SorteradFastighet") '	debugg = (fastighetJustNu = "ALA OLLAJVS 1:17")'dim debugg as logical debugg = false if(debugg) then end program end if'reads selected row from sorteradFastighet 
	dim fastighetJustNu as string
	fastighetJustNu = SorteradFastighet.kir 
	if fastighetJustNu <> "" then 
		call OmObjektSkapaFastighet(fastighetJustNu) 
	else
		print "noFastighet"
	end if
	fetch Next from SorteradFastighet call increment(G_Progress,G_ProgressRange,G_starttime)
end sub

sub saveSockenProgress(socken as string)

	dim query	,filePath,värde(),tablename as string,x as integer
	,tablenameA as alias
	
	tableName = Socken & "ressultat" 
	filePath = ApplicationDirectory$() + tableName & ".tab"

	call createRessultTableX(tablename,filePath)

	tableNameA = tableName
	Insert Into tableNameA select * From SockenRessultat DropIndex Auto

	commit table tableName
	drop table SockenRessultat
	methodEnd:
exit sub
queryError:
	print "[saveSockenProgress_error] queryError|" & query & "dropping table" print error$() drop table tableName resume methodEnd
end sub

function getMain(inputString as string, output() as string) as integer
	dim ant as integer
	ant = SplitStringAtCharacter(inputString, ",",output()) 
	
	if (ant = 1) then
		getMain = val(output(1))
	else
		getMain = 0
	end if

end function

Sub TabToObjRening(byVal nSocken as string, OutputreningsObjekt() as reningsobjekt)
	'resolved: no longer resoloves to zero always'seems like it always fails and send this date to the anteckningsält'resolved: no longer resoloves to zero always'seems like it always fails and send this date to the anteckningsält'assume this line removes double entries in 
	dim query,tempstring as string ,x,size as integer
	
	onError goto queryError 
		query = "select " & getColumnsOfTable_asString("reningIhopslagen") & ",CentroidX(obj)  & "","" & CentroidY(obj) ""koor""" & " from reningIhopslagen," & nSocken & " where spatialFastighet = kir  group by rowindex into ValtRening NoSelect" 
		run command query
	onError goto 0
	
	size = tableInfo(valtRening,tab_info_nrows) 

	if size <> 0 then
		fetch first from ValtRening 
		print nSocken & " " & size & "reningsObjekt" 
	else
		print "noTrigger"
		goto queryError 
	end if


	for x=1 to size
		Redim OutputreningsObjekt(x)
		OutputreningsObjekt(x).spatialFastighet = valtRening.spatialFastighet
		OutputreningsObjekt(x).spatialShift = valtRening.spatialShift
		OutputreningsObjekt(x).Fastighet_rening = searchReplace(valtRening.Fastighet_rening,"""","'")	
		OutputreningsObjekt(x).Antal_hushll_rening = iif(val(valtRening.Antal_hushll_rening & "") <> 0,val(valtRening.Antal_hushll_rening & ""),1)
		OutputreningsObjekt(x).Reningstyp = searchReplace(valtRening.Reningstyp,"""","'")
		OutputreningsObjekt(x).Storlek_m2 = valtRening.Storlek_m2
		OutputreningsObjekt(x).kordinater = valtRening.koor 
		OutputreningsObjekt(x).Kommentarer = searchReplace(valtRening.Kommentarer & " " & OutputreningsObjekt(x).Kommentarer,"""","'")
		OutputreningsObjekt(x).rowIndex = valtRening.rowIndex
		
		tempstring = "" & mixedDateToUnion("" & valtRening.Beslut_datum) if tempstring <> "0" then OutputreningsObjekt(x).Beslut_datum = tempstring else OutputreningsObjekt(x).Kommentarer = searchReplace(tempString & " " & OutputreningsObjekt(x).Kommentarer,"""","'") end if
		tempstring = "" & mixedDateToUnion("" & valtRening.Utfrd_datum) if tempstring <> "0" then OutputreningsObjekt(x).utfrd_datum = tempstring else OutputreningsObjekt(x).Kommentarer = searchReplace(tempString & " " & OutputreningsObjekt(x).Kommentarer,"""","'") end if
		
		call getAnslutna(OutputreningsObjekt(x).Anslutna_fastigheter)
		
		fetch next from ValtRening
	next

exit sub
queryError:
	print "[ERROR @ TabToObjRening] no reningobj receated"
	print query
	print socken
	print error$()
	end program

end sub

sub createRessultTableX(byval tablename as string, byval filePath as string)
	
	onError goto noTable close table tablename onError goto 0
	
	onError goto creationError

	Create Table tableName (
				Besksadress_Adress	Char(253),								'Fastighetens adress	->	Adress	Char(253)(ältmaxängd)	Besksadress_Adress
				Besksadress_Postnr	Char(253),								'Postnr	->	Postnr	Char(253)(ältmaxängd)	Besksadress_Postnr
				Besksadress_Ort Char(253),									'Ort	->	Ort	Char(253)(ältmaxängd)	Besksadress_Ort
				Besksadress_Huvudfastighet	Char(34),						'Fastighet_tillstnd	->	Huvudfastighet	Char(34)	Besksadress_Huvudfastighet
				FNR integer,												'Fastighet_tillstnd	->	Huvudfastighet(FNR)	integer	FNR
				ignore	Char(253),											'Lagfaren ?gare	->	Namn	Char(253)(ältmaxängd)	Verksamhetsutvare_Namn
				ignore integer,												'Person- /Orgnr	->	Person- /Orgnr	integer	Verksamhetsutv_Person_orgnr
				ignore Char(253),											'Namn (kund)	->	Namn (kund)	Char(253)(ältmaxängd)	Fakturamottagare_NAMN
				ignore	Char(253),											'Adress (kund)	->	Adress (kund)	Char(253)(ältmaxängd)	Fakturamottagare_Faktura_ADRESS
				ignore	Char(253),											'Postnr (kund)	->	Postnr (kund)	Char(253)(ältmaxängd)	Fakturamottagare_Faktura_POSTNR
				ignore	Char(253),											'Ort (kund)	->	Ort (kund)	Char(253)(ältmaxängd)	Fakturamottagare_Faktura_POSTOR
				Enhet Char(6),												'"VATTEN"	->	Enhet	Char(6)	Enhet
				Anteckning	Char(253),										'Anteckning (sweref/anlggning/rening)	->	Anteckning	Char(253)	Anteckning
				Aktuell_timavgift integer,									'925	->	Aktuell timavgift	integer	Aktuell timavgift
				Timdebitering Logical,										'TRUE	->	Timdebitering	Boolean	Timdebitering
				Objektnamn	Char(36),										'Huvudfastighet	->	Objektnamn	Char(36)	Objektnamn
				flik_Avloppsnlaggni_Boendetyp	Char(15),					'Typ_byggnad (beslut)	->	Boendetyp	Char(15)	flik_Avloppsnlaggni_Boendetyp
				flik_Avloppsanlggn_Byggnadsr Char(4),						'Tillstnd_giltigt_tom (beslut)	->	Byggnadär	Char(4)	flik_Avloppsanlggn_Byggnadsr
				flik_Avloppsa_Besiktningsdatum Date,						'utfrandedatum  (beslut)	->	Besiktningsdatum	datumä?-MM-DD)	flik_Avloppsa_Besiktningsdatum
				flik_Avloppsanlg_Beslutsdatum Date,						'beslutsdatum (beslut)	->	Beslutsdatum	datumä?-MM-DD)	flik_Avloppsanlg_Beslutsdatum
				Vatten	Char(17),											'Antal_hushll_tillstnd (beslut)	->	Vatten	Char(17)	Vatten
				Recipient Char(49),											'Fastighet Rening (rening)	->	Recipient	Char(49)	Recipient
				Inventering	Char(12),										'(om sweref) "Klart Vatten"	->	Inventering	Char(12)	Inventering
				Inventeringsinformation_Datum Date,							'Utskick1_datum (sweref)	->	Datum 	datumä?-MM-DD)	Inventeringsinformation_Datum
				Inventeringsinformation_Status	Char(6),					'Status (sweref)	->	Status	Char(6)	Inventeringsinformation_Status
				Bedmning Char(15),											'rendenr (sweref)	->	Bedmning	Char(15)	Bedmning
				fliken_Fastigheter	Char(34),								'Anslutna_fastigheter	->	fliken Fastigheter	Char(34)	fliken_Fastigheter
				fliken_FastigheterFNR integer,								'Anslutna_fastigheter	->	fliken Fastigheter(FNR)	integer	fliken Fastigheter(FNR)
				PunkttypAB Char(16),										'Punkttyp	->	Ansluten byggnad	Char(16)	PunkttypAB
				Fliken_Koordinater	Char(19),								'Koordinater (beslut/rening/sweref)	->	X o Y	Char(19)	Fliken_Koordinater
				fliken_renden	char(13),									'Diarienummer(Flagg,Beslut)	->	fliken renden	char(13)	fliken renden
				Anlggningskategori	Char(29),								'"Efterfljande rening"/"Slamavskiljare"/"Tank"/"Extra inventeringsinformation"	->	Anlggningskategori	Char(29)	Anlggningskategori
				besiktningdatum Date,										'utfrandedatum  (rening/beslut/tank)	->	besiktningdatum	datumä?-MM-DD)	besiktningdatum
				beslutsdatum Date,											'beslutsdatum (rening/beslut/tank)	->	beslutsdatum	datumä?-MM-DD)	beslutsdatum
				Anlggningstyp	Char(15),									'Typ_rening (rening)/Typ_Slamavskiljare (beslut)/Typ_av_tank (Beslut)/(om sweref) "Klart Vatten"	->	Anlggningstyp	Char(15)	Anlggningstyp
				Volym_m3 float,												'Storlek_m2 (rening)/Storlek_m3  (Beslut)	->	Volym m3	float	Volym m3
				Anl_fr_EftR_TInterv_mn integer,							'Antal_hushll_rening (rening)	->	ämningssintervall	integer	Anl_fr_EftR_TInterv_mn
				AnlF_efR_Koordinater_X_o_Y	Char(19),						'Koordinater  (är infiltration/markädd ?r beägen)/(är ansluten)/(är EXTRA inventeringsinformation ?r beägen)	->	Koordinater X och Y	Char(19)	AnlF_efR_Koordinater_X_o_Y
				PunkttypER	Char(20),										'"Efterfljande rening"/"Slamavskiljare"/"Tank"/"Extra inventeringsinformation"	->	Punkttyp Koordinater	Char(20)	PunkttypER
				Anlggning_fr_EfterfljRText Char(253),					'Kommentarer (rening/sweref/beslut)	->	Text	Char(253)(ältmaxängd)	Anlggning_fr_EfterfljRText
				ignore	Char(19),											''
				Anlggning_fr_S_Anlggningstyp	Char(15),					'Typ_byggnad (beslut)	->	Certifieringstyp (Typ av boende)	Char(15)	Anlggning_fr_S_Anlggningstyp
				Externt_Tjnsteid integer,									'rendenr  (beslut/tank/sweref)	->	Externt Tjnsteid	integer	Externt Tjnsteid
				text Char(6),												'Status  (sweref)	->	Status	Char(6)	text
				Anlggning_fr_Slamav_Volym_m3 date,						'Utskick1_datum (sweref)	->	Datum	datumä?-MM-DD)	Anlggning_fr_Slamav_Volym_m3
				ignore	Char(19),											''
				AnlfrEfterR_Anlggningstyp	date,							'Slamdispense	->	ämningsdispens fr.o.m	datumä?-MM-DD)	AnlfrEfterR_Anlggningstyp
				ignore	 Date,												''
				ignore	Date,												''
				ignorex	integer,											''objektIndex
				ignore	char(1),												''
				ObjektID integer,											'ObjektItterator	->	ObjektID	integer	ObjektID
				Path Char(253),												'Path (är filer som skall äras in, kopplas till objekt)	->	Path	Char(253)	Path
				Diarienummer char(13),										'Diarienummer (är renden som skall knytas)	->	Diarienummer	char(13)	Diarienummer
				Lpnummer integer											'Lpnummer (är renden som skall knytas)	->	Lpnummer	integer	Lpnummer


			) file filePath TYPE NATIVE Charset "WindowsLatin1"
			Create Map For tablename CoordSys Earth Projection 1, 104
	onError goto 0
	
exit sub
	creationError:
	print "creationError" & error$()
	end program
	
	noTable:
	resume next 
end sub

sub enskiltCopyConstruktor(inputX as enskiltObjekt, outputXTable() as enskiltObjekt,byVal outPutItterator as integer)
		'inserts copy of inputX at place of outputItterator
		if ubound(outputXTable) < outPutItterator then
			Redim outputXTable(outPutItterator)
		end if
		
		outputXTable(outPutItterator).Diarienummer = 		inputX.Diarienummer
		outputXTable(outPutItterator).Fastighet_tillsänd = 	inputX.Fastighet_tillsänd
		outputXTable(outPutItterator).spatialShift = 		inputX.spatialshift
		outputXTable(outPutItterator).spatialFastighet = 	inputX.spatialFastighet
		outputXTable(outPutItterator).Typ_byggnad = 			inputX.Typ_byggnad
		outputXTable(outPutItterator).Antal_husäll_tillsänd = inputX.Antal_husäll_tillsänd
		outputXTable(outPutItterator).Fastighet_rening = 	inputX.Fastighet_rening
		outputXTable(outPutItterator).Typ_Slamavskiljare = 	inputX.Typ_Slamavskiljare
		outputXTable(outPutItterator).Storlek_m3 = 			inputX.Storlek_m3
		outputXTable(outPutItterator).Typ_rening = 			inputX.Typ_rening
		outputXTable(outPutItterator).Storlek_m2 = 			inputX.Storlek_m2
		outputXTable(outPutItterator).Typ_sluten_tank = 		inputX.Typ_sluten_tank
		outputXTable(outPutItterator).Storlek__m3 = 			inputX.Storlek__m3
		outputXTable(outPutItterator).Beslut_datum = 		inputX.Beslut_datum
		outputXTable(outPutItterator).Utärd_datum = 		inputX.Utärd_datum
		outputXTable(outPutItterator).Avgift = 				inputX.Avgift
		outputXTable(outPutItterator).Tillsänd_giltigt_tom = inputX.Tillsänd_giltigt_tom
		outputXTable(outPutItterator).Anteckningar = 		inputX.Anteckningar
		outputXTable(outPutItterator).kordinater = 			inputX.kordinater
		outputXTable(outPutItterator).rowindex = 			inputX.rowindex
End Sub

sub swerefObjektCopyConstr(inputX as swerefObjekt, outputTable() as swerefObjekt,byVal outPutItterator as integer)
		'inserts copy of inputX at place of outputItterator
		
		if ubound(outputTable) < outPutItterator then
			Redim outputTable(outPutItterator)
		end if
			
		OutputTable(outPutItterator).FASTIGHET = inputX.FASTIGHET
		OutputTable(outPutItterator).Fastighet_tillsänd = inputX.Fastighet_tillsänd
		OutputTable(outPutItterator)ärendenr = inputXärendenr
		OutputTable(outPutItterator).Beslut_datum = inputX.Beslut_datum
		OutputTable(outPutItterator).Status = inputX.Status
		OutputTable(outPutItterator).Utskick1_datum = inputX.Utskick1_datum
		OutputTable(outPutItterator).Anteckning = inputX.Anteckning
		OutputTable(outPutItterator).utärddatum = inputX.utärddatum
		OutputTable(outPutItterator).slamämtning = inputX.slamämtning
		OutputTable(outPutItterator).Antal_byggnader = inputX.Antal_byggnader
		OutputTable(outPutItterator).kordinater = inputX.kordinater
		OutputTable(outPutItterator).SpatialFastighet = inputX.SpatialFastighet
		OutputTable(outPutItterator).rowindex = inputX.rowindex
End Sub

sub reningObjCopyConstr(inputX as ReningsObjekt,OutputTable() as ReningsObjekt,byVal outPutItterator as integer)
			dim z as integer
			if ubound(outputTable) < outPutItterator then
				Redim OutputTable(outPutItterator)
			end if
		
			OutputTable(outPutItterator).spatialFastighet = inputX.spatialFastighet OutputTable(outPutItterator).spatialShift = inputX.spatialShift OutputTable(outPutItterator).Fastighet_rening = inputX.Fastighet_rening OutputTable(outPutItterator).Antal_husäll_rening = inputX.Antal_husäll_rening
			OutputTable(outPutItterator).Reningstyp = inputX.Reningstyp OutputTable(outPutItterator).Storlek_m2 = inputX.Storlek_m2 OutputTable(outPutItterator).kordinater = inputX.kordinater OutputTable(outPutItterator).Kommentarer = inputX.Kommentarer
			OutputTable(outPutItterator).Beslut_datum = inputX.Beslut_datum
			OutputTable(outPutItterator).utärd_datum = inputX.Utärd_datum
							
			redim OutputTable(outPutItterator).Anslutna_fastigheter(ubound(inputX.Anslutna_fastigheter()))
			
			for z=1 to ubound(inputX.Anslutna_fastigheter())
				OutputTable(outPutItterator).Anslutna_fastigheter(z) = inputX.Anslutna_fastigheter(z)
			next		

			OutputTable(outPutItterator).rowIndex = inputX.rowIndex
end sub


sub skapaMutationer(en() as enskiltObjekt ,re() as reningsobjekt ,sw() as swerefobjekt,byVal minimumDebt as integer)

		dim enskiltTokenObjekt() as enskiltObjekt ,reningsTokenObjekt() as reningsobjekt ,swerefTokenObjekt() as swerefobjekt ,trodvdighet() as trovrdighetsobjekt
		
			call subTablesafter(enskiltTokenObjekt,en,reningsTokenObjekt,re,swerefTokenObjekt,sw,minimumDebt)
				call initializer(reningsTokenObjekt,enskiltTokenObjekt,swerefTokenObjekt)
					call genTrovrdighet(trodvdighet,enskiltTokenObjekt,reningsTokenObjekt,swerefTokenObjekt)
						call insertAt(trodvdighet(1),enskiltTokenObjekt,reningsTokenObjekt,swerefTokenObjekt,minimumDebt)
		
		minimumDebt = minimumDebt + 1
		if ((ubound(enskiltTokenObjekt) > minimumDebt) OR (ubound(reningsTokenObjekt) > minimumDebt) or (ubound(swerefTokenObjekt) > minimumDebt)) then
			call skapaMutationer(enskiltTokenObjekt,reningsTokenObjekt,swerefTokenObjekt,minimumDebt)
		end if

exit sub k: print error$() end program kx: print error$() end program end sub

sub initializer(reningsTokenObjekt() as reningsobjekt,enskiltTokenObjekt() as enskiltObjekt,swerefTokenObjekt() as swerefobjekt)

	dim ignoreR() as reningsobjekt
	,ignoreE() as enskiltObjekt
	,ignoreS() as swerefobjekt
	,ignore as integer
	ignore = 0
	'om ingen rening alls, stoppa dit en token
	if ubound(reningsTokenObjekt) < 1 then
		ignore = InitializeReningObjekt(ignore,ignoreR(),reningsTokenObjekt())
	end if
	
	'om ingen enskilt alls, stoppa dit en token
	if ubound(enskiltTokenObjekt) < 1 then
		ignore = InitializeEnskiltObjekt(ignore,ignoreE(),enskiltTokenObjekt())
	end if
	
	'om ingen sweref alls, stoppa dit en token
	if ubound(swerefTokenObjekt) < 1 then
		ignore = InitializeSwerefObjekt(ignore,ignoreS(),swerefTokenObjekt())
	end if
	
end sub

sub utskrivningsobjektsKonstruktor(
		sOx() as swerefobjekt,
		rOx() as reningsObjekt,
		eOx() as enskiltobjekt
	)
	
		dim ittr, objektid as integer	,reningsTokenObjekt() as reningsObjekt	,enskiltTokenObjekt() as enskiltobjekt	,swerefTokenObjekt() as swerefobjekt	,tableName as string	
		,sO(1) as swerefobjekt,	rO(1) as reningsObjekt,	eO(1) as enskiltobjekt
		,uObj() as utskriftsObjekt

		ittr = expandutskriftsobjekt(uObj) tableName = "LatestObjectID"	if IsTableOpen(tableName) then select col1 from LatestObjectID	fetch first from latestObjectID 
		G_senastObjectID = iif(G_senastObjectID < latestObjectID.col1,latestObjectID.col1,G_senastObjectID) end if objektid = iif(G_senastObjectID <> 0,G_senastObjectID + 1,1)

		G_senastObjectID = objektid
		uObj(ittr).Objektid = objektid '"Huvud","ObjektID",: "integer",: "ObjektItterator" 

		call huvuDObjekt(uObj(),ittr)
		call anteckningKordinat(sOx(1),eOx(1),rOx(1),uObj(),ittr)					
		call inventeringsinformation(uObj,ittr,sOx(1))
		call Recipient(uObj,eOx(1),rOx(1),ittr)
		call Avloppsanlggning(uObj(),ittr,eOx(1))				
			
		call subTablesafter(eO,eOx,rO,rOx,sO,sOx,2)
		
		'print ubound(eO) + ubound(rO) + ubound(sO) 
		
		if ubound(eO) + ubound(rOx) + ubound(sO) > 0 then
			dim anl() as anlggningsobjekt
			call Anlggning(anl,eOx,rOx,sO)
			'dessa skapar nya rader, men ndrar inte objektId
			ittr = ittr + anlggningsobjektToUtskifts(anl,uObj,ittr)
		end if
		
		ittr = ittr + diarienummerForutskriftsobjekt(uObj,ittr,eOx,sOx,objektid)
		call fastighetForUtskriftsobjekt(uObj,ittr,sOx,rOx,eOx,objektid)
		call saveUtskriftsProgress(uObj)	
			
End Sub

sub OmObjektSkapaFastighet(FastighetsBetInput as string)
		',swerefStart,ReningStart,EnskiltStart,objektCreationStart,swerefStop,ReningStop,EnskiltStop,objektCreationStop as float 
	dim antalObjekt,before,after as integer,debugg as logical,fastighetsObjektsTabell as string,
	EnskiltObjektfastighets() as EnskiltObjekt,reningsObjektfastighets() as reningsObjekt,swerefObjektfastighets() as swerefObjekt
	debugg = false
	antalObjekt = 0
	
	if(countShiftenGenUtvald(FastighetsBetInput) <> 0) then 
		antalObjekt = SwerefSubsetByFasgtighet(G_swerefObjekt,FastighetsBetInput,swerefObjektfastighets) + ReningsSubsetByFasgtighet(G_reningsObjekt,FastighetsBetInput,reningsObjektfastighets) + EnskiltSubsetByFasgtighet(G_EnskiltObjekt,FastighetsBetInput,EnskiltObjektfastighets)
		
		if(antalObjekt > 0 ) then 
			fastighetsObjektsTabell = G_socken & "fastighetsObjekt" before = tableInfo("" & fastighetsObjektsTabell,TAB_INFO_NROWS)
		
			call FastighetsObjCreation(fastighetsObjektsTabell,
			fastighetsBetInput,
			reningsObjektfastighets,
			swerefObjektfastighets,
			EnskiltObjektfastighets)
			
			after = tableInfo("" & fastighetsObjektsTabell,TAB_INFO_NROWS) if (after = before) then goto creationError end if
		else 
			if(debugg) then	print ubound(G_swerefObjekt) & FastighetsBetInput & ubound(swerefObjektfastighets) print ubound(G_reningsObjekt) & FastighetsBetInput & ubound(reningsObjektfastighets) print ubound(G_EnskiltObjekt) & FastighetsBetInput & ubound(EnskiltObjektfastighets) end if
		end if
		
	else
		print "Objekt p fastighet("& FastighetsBetInput & ") = 0" 
	end if
	
exit sub creationerror: 'else 'if ((ubound(fastighetsObjektTabell(after).swerefobjekt()) + ubound(fastighetsObjektTabell(after).Enskiltobjekt()) + ubound(fastighetsObjektTabell(after).reningsobjekt())) <> antalObjekt)  'then' & ubound(fastighetsObjektTabell(after).swerefobjekt()) & " " & ubound(fastighetsObjektTabell(after).Enskiltobjekt()) & " " & ubound(fastighetsObjektTabell(after).reningsobjekt()) & "<>" & antalObjekt' end if			'print "inga objekt p " & FastighetsBetInput print "[ERROR @ OmObjektSkapaFastighet]" & error$() end program End sub

sub getAnslutna(anslutan() as string)'h?mtar ocks? gemensamhetsanl?ggningar
	dim P as integer
	,tempString as string
	,anslutningsAlias as alias
	,temptext as string
	
	if(not(valtRening.anslutna_fastigheter_10 = "gem,gem")) then
		for p=1 to 10		
			anslutningsAlias = "valtRening.Anslutna_fastigheter_" & p
			temptext = anslutningsAlias
			if(temptext <> "") then
				call addStringToArrayAsifSet(anslutan(),searchReplace(temptext,"""","'"))
			end if
		next
	else
		tempString = valtRening.kommentarer 'kommentarf?ltet har identifieringen
		call gemAnslutna(tempstring,anslutan())
		call addStringToArrayAsifSet(anslutan(),"gem,gem")
	end if

end sub
