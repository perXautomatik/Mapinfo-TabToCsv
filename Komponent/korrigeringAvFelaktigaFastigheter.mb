Include "MapBasic.def"

Declare Sub Main
declare sub increment(iProgress as integer,iProgressRange as integer,starttime as integer)

declare Function SplitStringAtCharacter(ByVal sInput As String, ByVal sSplitChar As String, sPartsArray() As String) As Integer

Dim iProgress,iProgressRange,starttime as integer

declare sub process()

Sub Main()
	Select fliken_Fastigheter "flikenFastigheter",fliken_FastigheterFNR "fnr"
	from HelaSolen where fliken_Fastigheter <> "" AND fliken_FastigheterFNR = 0 into UtanFnr
	
	
	onError goto FSUrsprungsFastigheterMedSockenOc run command "Open Table ""C:\Users\crbk01\OneDrive - Region Gotland\To Vision, GDPR cleanup\MapInfoTables\skikt\Vanliga Tabfiler\UrsprungsFastigheterMedSockenOc.TAB"" as korrigerandeTabell" onError goto 0 'Open Table "G:\sbf\Livsmiljï¿½\Gemensamt\mapbasic program projekt\skikt\Vanliga Tabfiler\FastigHeterMedSockenTraktSepGrouped.TAB" as korrigerandeTabell
		Select Socken from korrigerandeTabell where socken <> "" group by socken into socken
	select * from UtanFnr group by flikenFastigheter into Left
	fetch first from Left
	startTime = timer()
	iprogressRange = tableInfo(left,tab_info_nRows)
	iprogress = 0	
	ProgressBar "ProcessingflikenFastigheter...." & iProgressRange & " items"
		     Calling process
	Range iProgressRange
	commit table helaSolen
	Select fliken_Fastigheter "flikenFastigheter",fliken_FastigheterFNR "fnr",ignorex "rowid" from HelaSolen where fliken_Fastigheter <> "" AND fliken_FastigheterFNR = 0 into left2Correct
	
	Select Besksadress_huvudfastighet "flikenFastigheter",FNR
	from HelaSolen where Besksadress_huvudfastighet <> "" AND FNR = 0 into UtanFnr
	select * from UtanFnr group by flikenFastigheter into Left
	fetch first from Left
	startTime = timer()
	iprogressRange = tableInfo(left,tab_info_nRows)
	iprogress = 0	
	ProgressBar "Processingbessfastighet...." & iProgressRange & " items"
		     Calling process
	Range iProgressRange

	end program
		FSUrsprungsFastigheterMedSockenOc:
	print error$() resume next
End Sub


sub process()

	fetch first from socken

	do until eot(socken)
		dim sokStreng,sockenB,korrigerandeTrackt,blockb as string		sockenB = socken.col1 sokStreng = Left.flikenFastigheter
		if instr(1,sokStreng,left$(sockenB,5)) <> 0 then
			if sokStreng <> sockenB then select trakt from korrigerandeTabell where socken = SockenB AND trakt <> "" group by trakt into trakt fetch first from trakt
				do until eot(Trakt)
					dim sPartsArray() As String			
					
					if(SplitStringAtCharacter(trakt.Col1, " ", sPartsArray) = 2) then
						korrigerandeTrackt = spartsArray(2)
					else
						korrigerandeTrackt = trakt.Col1
					end if
					
					if instr(1,sokStreng,korrigerandeTrackt) <> 0 then dim sockenOTrackt as logical sockenOTrackt = sokStreng <> SockenB & " " & korrigerandeTrackt				
						if Not(sockenOTrackt) then select blockenhet from korrigerandeTabell where socken = SockenB AND trakt = korrigerandeTrackt AND blockenhet <> ""  group by blockenhet into blockenhet fetch first from blockenhet
							do until eot(blockenhet) blockB = Blockenhet.col1
								
								if instr(1,sokStreng,blockB) <> 0 then
									select fnr from korrigerandeTabell where socken = SockenB AND trakt = korrigerandeTrackt AND blockenhet = blockB group by fnr into hittatFNR fetch first from hittatFNR dim FnrF as integer FnrF = hittatFNR.fnr
									
									update UtanFnr set fnr=FnrF where flikenFastigheter = sokStreng print "updated : " & sokStreng & " = " & SockenB & " " & korrigerandeTrackt & " " & blockB goto LoopEnd
								end if
								fetch next from blockenhet loop	
						else goto LoopEnd end if						
					end if
					fetch next from trakt loop
			else goto LoopEnd end if
		end if			
		
		fetch next from socken
	loop
	LoopEnd:
	fetch Next from Left
	call increment(iProgress,iProgressRange,starttime)		
end sub

sub increment(iProgress as integer,iProgressRange as integer,starttime as integer)

	iProgress = iProgress + 1 
	If iProgress <= iProgressRange Then
		if iProgress mod 100 = 0 then 'at each hundred incrementetations, short time summery is printed
			dim	totaltidH,totaltidM,totaltids,upskattad,upskattadH,upskattadM,upskattads as integer
			,tidperEnhet,totaltid as float
			
			totaltid = timer() - starttime	
			tidperEnhet = totaltid/iprogress		
			
			if(totaltid > 3600) then
				totaltidH = totaltid/3600
				totaltidM = (totaltid mod 3600) / 60
				totaltids = (totaltid mod 3600) mod 60
			else
				totaltidH = 0
				if(totaltid > 60) then
					totaltidM = totaltid / 60
					totaltids = totaltid mod 60
				else
					totaltidM = 0
					totaltids = totaltid
				end if
			end if
			
			
			OnError goto OverflowError
				upskattad = iProgressRange * tidPerEnhet
			onError goto 0
			if false then 
				overflowError:
				upskattad = iProgressRange
			End If
			
			upskattadH = upskattad/3600
			upskattadM = (upskattad mod 3600) / 60
			upskattads = (upskattad mod 3600) mod 60
			
			
			print iProgress & "upskattat: " & upskattadH & "h" & upskattadM & "m" & upskattads & "s totalt:" & totaltidH & "h" & totaltidM & "m" & totaltids & "s passerade"
		End If
		
		ProgressBar = iProgress
	Else
		ProgressBar = -1
	End If

end sub

Function SplitStringAtCharacter(ByVal sInput As String, ByVal sSplitChar As String, sPartsArray() As String) As Integer
'http://twiav-tt.blogspot.se/2013/05/mapbasic-bespoke-function-to-split.html*********************************************************************************************
	OnError Goto HandleError
	
	Dim iPos, iEnd, iCount As Integer
	
	If Len(sInput) = 0 Then
		SplitStringAtCharacter = 0
		Exit Function
	End If
	    
	Do While iEnd <= Len(sInput)
		iPos = iEnd + 1
		iEnd = InStr(iPos, sInput, sSplitChar)
		If iEnd = 0 Then
			iEnd = Len(sInput) + 1
		End If
	
		iCount = iCount + 1
		ReDim sPartsArray(iCount)
		sPartsArray(iCount) = Mid$(sInput, iPos, iEnd - iPos)
	Loop
	
	SplitStringAtCharacter = UBound(sPartsArray)
	
	Exit Function
	'---------------------------
	HandleError:
	Note Error$()

End Function
