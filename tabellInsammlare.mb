Include "MapBasic.def"
Include "tabellInsammlare.def"
include "commonLib\commonLib1.def"
include "pivotizer.def"


global senastObjectID as integer


sub injectGemensamma()
	insert into reningIhopslagen select * from gemensamma
End Sub

sub diarienummerForUtskriftsObjekt(
	utskriftsObjekt() as utskriftsobjekt,
	itterator as integer,
	enskiltObjekt as enskiltobjekt,
	swerefObjekt as swerefobjekt, 
	objektid as integer
	)
	dim ärendennr() as string
	if (enskiltObjekt.Diarienummer<>"MHN") then
		call addStringToArrayAsifSet(ärendennr(),enskiltObjekt.Diarienummer)
		utskriftsObjekt(itterator).Externt_Tjänsteid = iif(EnskiltÄrInteToken(enskiltObjekt),DiarieUtanBokstäver(enskiltObjekt.diarienummer),"")
		utskriftsObjekt(itterator).Externt_Tjänsteid_2 = iif(EnskiltÄrInteToken(enskiltObjekt) AND (enskiltObjekt.Typ_sluten_tank <> "0" and enskiltObjekt.Typ_sluten_tank <> "" and enskiltObjekt.Typ_sluten_tank <> "-"),DiarieUtanBokstäver(enskiltObjekt.diarienummer),"")
	end if
	if (swerefObjekt.Ärendenr<>"MHN") then
		call addStringToArrayAsifSet(ärendennr(),swerefObjekt.Ärendenr) 
	end if

	'redan standardiserat call StandardiseraDiarie(swerefObjekt.Ärendenr,EnskiltObjekt.Diarienummer, ärendennr)
	if(ubound(ärendennr)>0) then
		utskriftsobjekt(itterator).fliken_Ärenden = ärendennr(1)
	end if

	'skapa en ny rad, med itterator+1 men objektide det samma.
	'ärendenr(2) har då ett värde 
	if(ubound(ärendennr)=2) then
		itterator = itterator + 1
		redim utskriftsobjekt(itterator)
		utskriftsobjekt(itterator).fliken_Ärenden = ärendennr(2)
		utskriftsobjekt(itterator).Objektid = objektid	
	end if
end sub

function trovärdighetsIndexer(
	användaReningar() as integer,
	swerefobjekt as swerefobjekt,
	reningsobjekt as reningsobjekt,
	enskiltobjekt as enskiltobjekt
	) as float

	dim trovärdighetsIndex,tempFloat,xplan,yplan,hypoten,distans as float
	,swerefKord(),enskiltKord() as string
	,Et,St,Rt as logical
	,p as integer
	
	Et = EnskiltÄrInteToken(enskiltObjekt)
	St = swerefÄrInteToken(swerefObjekt)
	Rt = ReningÄrInteToken(reningsobjekt)
	
	if(Et AND St) then			
		if(SplitStringAtCharacter(swerefobjekt.kordinater,",",swerefKord)+SplitStringAtCharacter(enskiltobjekt.kordinater,",",enskiltKord) = 4) then
			xplan = val(swerefKord(1)) - val(enskiltKord(1))
			yplan = val(swerefKord(2)) - val(enskiltKord(2))
			
			hypoten = sqr(xplan*xplan+yplan*yplan)'hypotenusan mellan enskilt och sweref
			distans = sqr(hypoten*hypoten)
			
			trovärdighetsIndex = 1/iif(distans<>0,distans,0.1)
		else
			print "errorX:" & enskiltAsString(enskiltObjekt)
			print "errorY:" & SwerefAsString(swerefObjekt)
		end if
		
		trovärdighetsindex = trovärdighetsindex 
		+ IFSAMEoneDIFFRENTzeroONEBLANKhalf(swerefobjekt.Ärendenr,EnskiltObjekt.Diarienummer)'om diarie nummer stämmer mellan flagga och enskilt 1
		+ iif(len(swerefobjekt.Ärendenr)>13 OR len(EnskiltObjekt.Diarienummer)>13,-0.3,0)'om diarie är längre än 13 bokstäver -1
	end if
	
	if(Rt) then
		tempFloat = 0
		
		if(Et) then			
			if XOR(ubound(ReningsObjekt.Anslutna_fastigheter()) = 0,enskiltobjekt.Fastighet_rening = "") then  'tempFloat om fastighet inte fanns i listan på anslutna, men kan aldrig bli mer än 1
				tempFloat = 0.5
			else
				for p=1 to ubound(ReningsObjekt.Anslutna_fastigheter())
					if(enskiltobjekt.Fastighet_rening = ReningsObjekt.Anslutna_fastigheter(p)) then 'om någon av anslutna fastigheter = fastighet rening
						tempFloat = 1
					end if
				next
				
				dim a,b,c as logical
				
				a = tempFloat=0
				b = findInINTArray(reningsobjekt.rowIndex,användaReningar)
				c = ubound(ReningsObjekt.Anslutna_fastigheter)>1
				
				if(a) then
					tempFloat = tempFloat + iif(b,-9.4,iif(c,1,0))'om rening redan är uptagen.. och gemensamt != true = -1
				end if
			end if
			
			trovärdighetsIndex = trovärdighetsIndex
			+ tempFloat			
			+ IFSAMEoneDIFFRENTzeroONEBLANKhalf(enskiltobjekt.Fastighet_rening,ReningsObjekt.SpatialFastighet)' om det finns en rening på fastighet_rening
			+ IFSAMEoneDIFFRENTzeroONEBLANKhalf(enskiltobjekt.Typ_rening,ReningsObjekt.Reningstyp)'om rening på fastighet med rening har typ rening = fastighet 1
			+ IFSAMEoneDIFFRENTzeroONEBLANKhalf(enskiltobjekt.Storlek_m2,ReningsObjekt.storlek_m2)'om rening på fastighet med rening har typ storlekrening = fastighet 1
			+ IFSAMEoneDIFFRENTzeroONEBLANKhalf(enskiltobjekt.Utförd_datum,ReningsObjekt.Utförd_datum)'om rening på fastighet med rening har typ Utförandedatum	 
		end if
		
		if(St) then
			trovärdighetsIndex = trovärdighetsIndex
			 + IFSAMEoneDIFFRENTzeroONEBLANKhalf(swerefobjekt.Beslut_datum,ReningsObjekt.Beslut_datum)	'1 extra poäng om sweref också matchar
			 + IFSAMEoneDIFFRENTzeroONEBLANKhalf(enskiltobjekt.Beslut_datum,ReningsObjekt.Beslut_datum)'om rening på fastighet med rening har typ beslutdatum
		end if
	end if
	
	trovärdighetsIndexer = (trovärdighetsIndex)/9 'tempFloat om fastighet inte fanns i listan på anslutna, men kan aldrig bli mer än 1
end function

sub getAnslutna(anslutan() as string)'hämtar också gemensamhetsanläggningar
	dim P as integer
	,tempString as string
	,anslutningsAlias as alias
	,temptext as string
	
	if(not(valtRening.anslutna_fastigheter_10 = "gem,gem")) then
		for p=1 to 10		
			anslutningsAlias = "valtRening.Anslutna_fastigheter_" & p
			temptext = anslutningsAlias
			if(temptext <> "") then
				call addStringToArrayAsifSet(anslutan(),searchReplace(temptext,"""","'"))
			end if
		next
	else
		tempString = valtRening.kommentarer 'kommentarfältet har identifieringen
		call gemAnslutna(tempstring,anslutan())
		call addStringToArrayAsifSet(anslutan(),"gem,gem")
	end if

end sub

function reningsFilterByBet(ReningAlias() as ReningsObjekt,FastighetsBetInput as String,reningsObjekt() as ReningsObjekt) as integer

		dim x,y,z,lenght as integer
		,found as logical
		
		y = 1
		for x=1 to ubound(ReningAlias)
			found = false									
				
			if (lenght = len(ReningAlias(x).spatialFastighet) OR lenght = len(ReningAlias(x).Fastighet_rening)) then 'atempting to fasten stringcompare
				found = (ReningAlias(x).spatialFastighet = FastighetsBetInput OR ReningAlias(x).Fastighet_rening = FastighetsBetInput)
			end if
			
			if Not(found) then
				for z=1 to ubound(ReningAlias(x).Anslutna_fastigheter())
					if(lenght = len(ReningAlias(x).Anslutna_fastigheter(z))) then
						if(ReningAlias(x).Anslutna_fastigheter(z) = FastighetsBetInput) then
							found = true
						end if
					end if						
				next
			end if
			
			if found then
				Redim reningsObjekt(y)
				
				reningsObjekt(y).spatialFastighet = ReningAlias(x).spatialFastighet reningsObjekt(y).spatialShift = ReningAlias(x).spatialShift reningsObjekt(y).Fastighet_rening = ReningAlias(x).Fastighet_rening reningsObjekt(y).Antal_hushåll_rening = ReningAlias(x).Antal_hushåll_rening
				reningsObjekt(y).Reningstyp = ReningAlias(x).Reningstyp reningsObjekt(y).Storlek_m2 = ReningAlias(x).Storlek_m2 reningsObjekt(y).kordinater = ReningAlias(x).kordinater reningsObjekt(y).Beslut_datum = ReningAlias(x).Beslut_datum
				reningsObjekt(y).utförd_datum = ReningAlias(x).Utförd_datum reningsObjekt(y).Kommentarer = ReningAlias(x).Kommentarer
								
				redim reningsObjekt(y).Anslutna_fastigheter(ubound(ReningAlias(x).Anslutna_fastigheter()))
				
				for z=1 to ubound(ReningAlias(x).Anslutna_fastigheter())
					reningsObjekt(y).Anslutna_fastigheter(z) = ReningAlias(x).Anslutna_fastigheter(z)
				next		
	
				reningsObjekt(y).rowIndex = ReningAlias(x).rowIndex
				y = y + 1
			end if
		next
		
		reningsFilterByBet = ubound(reningsObjekt)
exit function

	CommandError:
		note commandString & Error$()
		end program
End function

function DiarieMixedToUnit(byVal text as string) as string
	'skall bli, mhn-xxxx-xxxx
	'kan vara mhn xxxx/xxxx
	'eller xx/xxxx
	'eller xxxx/xxxx
	'eller xx-xxxx
	'eller mhn-xx-xxxx
	'eller mhn-xxxx-xxxx
	If text <> "" Then
			
		dim sPartsArray(),sPartsArray2(),dPartsArray(),ressultString,paddedDiarieNummer,PaddedDay,tempstring as string
		,tempInteger,nrOfSpaces,i,theYear,theMonth,theDay,nrOfslashes,nrOfdashes,firstPart,secondPart,cleanVar as integer
		
		nrOfslashes = SplitStringAtCharacter(text & "", "/", sPartsArray())
		nrOfdashes = SplitStringAtCharacter(text & "", "-", dPartsArray())
		nrOfSpaces = SplitStringAtCharacter(text & "", " ", sPartsArray2())
		if nrOfslashes = 2 then	
			'it has a / (spartArray()
			'måste då ha ett numeriskt väde i 2 och text eller numeriskt i 1
			firstPart = firstLeftMostNumber(sPartsArray(1))'endast numeric vänstra del av 1
			secondPart = firstLeftMostNumber(sPartsArray(2))'endast numeric vänstra på sida 2
		elseif(nrOfdashes > 1) then
			do case nrOfdashes		
				case 2
					firstPart = firstLeftMostNumber(dPartsArray(1))'endast numeric på sida 1
					secondPart = firstLeftMostNumber(dPartsArray(2))'endast numeric på sida 2
				case 3
						if(firstLeftMostNumber(sPartsArray2(1))>0) then
							cleanVar = 1
							goto cleanedNumber
						else
							firstPart = firstLeftMostNumber(sPartsArray2(2))'endast numeric på sida 1
							secondPart = firstLeftMostNumber(sPartsArray2(3))'endast numeric på sida 2
						end if
				case else
			end case
		elseif(nrOfSpaces = 2) then
			firstPart = firstLeftMostNumber(sPartsArray2(1))'endast numeric på sida 1		
			secondPart = firstLeftMostNumber(sPartsArray2(2))'endast numeric på sida 2
		else
			cleanVar = 2
			goto cleanedNumber
		end if
		
		if(firstPart = 0 OR secondPart = 0) then
			cleanVar = 3
			goto cleanedNumber
		else
			
			tempInteger = len(firstPart & "") 'if it's fournumbered it's hard to estimate how large or small it might be
			if(tempInteger <> 4)	then 'if yearpart is not 4 letters			
				if(firstPart > 20) then
						firstPart = 1900 + firstPart
				else
						firstPart = 2000 + firstPart
				end if
			end if
		
			DiarieMixedToUnit = "MHN-" & firstPart & "-" & secondPart
					
		end if
		
	else
		DiarieMixedToUnit = text
	end if
exit function
	cleanedNumber:
		DiarieMixedToUnit = (cleanVar) & text 'kan inte tolka nummret
End Function

function expandUtskriftsobjekt(utskriftsObjekt() as utskriftsobjekt) as integer

	dim itterator as integer
	
	itterator = ubound(utskriftsObjekt()) +1
	redim UtskriftsObjekt(itterator)
	
	expandUtskriftsObjekt = itterator

end function

sub presentTime(swerefStart as float,ReningStart as float, EnskiltStart as float, objektCreationStart as float,swerefStop as float,ReningStop as float, EnskiltStop as float, objektCreationStop as float)
		dim total, swerefProc, reningProc,enskiltProc,objektProc,swerefTot, reningTot,enskiltTot,objektTot as float
		
		swerefTot = swerefStop-swerefStart+0.01
		ReningTot = ReningStop-ReningStart+0.01
		EnskiltTot = EnskiltStop-EnskiltStart+0.01
		objektTot = objektCreationStop-objektCreationStart+0.01
		
		total = (swerefTot)+(EnskiltTot)+(ReningTot)+(objektTot)
						
		print "[total:" & Format$(total, "#.##") & 
		"|Sw "& Format$((swerefTot/total), "%")  &
		" |Re "& Format$ ((ReningTot/total), "%")  &
		" |En "& Format$ ((enskiltTot/total), "%")  &
		" |Ob "& Format$ ((objektTot/total), "%") & " ]"
	
End Sub

sub tolkning(FastighetsObjekt as fastighetsObjekt,UtskriftsObjekt() as UtskriftsObjekt,användaReningar() as integer)

	'funderinga, reningen bör inte återanvändas om det är nödvändigt, frågan är hur man håller koll på vilken rening som använts vart...
	' reningsobjektet skapades med ett indexfält, så om vi gör en array som förvarar alla använda index.. dock behövs typ nummer av anslutna på index, gärna fastighetsbeteckningar också.....
	' om man endast håller koll på indexfältet, och säger, om rening delats, men rening inte har men en en anslutning kan ge minus
	' om endast en rening, en anläggning och en flagga, ignorera alla andra mätningar
	' om anläggningar > 1, en rening, lägg till rening på båda anläggningarna som gemensam
	' om fler flaggor... ge specialvärde.
	'om endast 1 flagga + 1 beslut = 1/distance 'distansberäkning verkar krongligt.

	'ta ut bästa ressultat för varje anläggning
	'skall använda reningar också tolkas här?
	'om inte kommer anläggningen läggas till, för att sedan bli reffererad igen av någon anläggning
	' frågan är om man i efterhand skall ränsa bort fastigheter som har en rening som är delad utan att det plockats upp tidigare i koden.
	'anslutna = FillTokenObjekts(FastighetsObjekt)
	'	dim qz, antal as integer
	'	
	'	for qz=1 to ubound(fastighetsobjekt.reningsobjekt)
	'		antal = ubound(fastighetsobjekt.reningsobjekt(qz).Anslutna_fastigheter)
	'	
	'		print antal & ":" & StringArrayAsString(fastighetsobjekt.reningsobjekt(qz).Anslutna_fastigheter)
	'	next

	
	dim enskiltTokenOrObjekt(),enskiltTokenObjekt() as enskiltObjekt
	,reningTokenOrObjekt(),reningsTokenObjekt() as reningsobjekt
	,swerefTokenOrObjekt(),swerefTokenObjekt() as swerefobjekt
	,trovärdighetsIndex as float 
	,anslutna as logical
	
	if (ubound(FastighetsObjekt.reningsobjekt()) = 1 ) AND (ubound(FastighetsObjekt.enskiltobjekt()) = 1) AND (ubound(FastighetsObjekt.swerefobjekt()) = 1) then
		
		trovärdighetsIndex = 1
		
		call utskrivningsobjektsKonstruktor(
			FastighetsObjekt.swerefobjekt(1),
			FastighetsObjekt.reningsobjekt(1),
			FastighetsObjekt.enskiltobjekt(1),
			UtskriftsObjekt(),
			användaReningar,
			trovärdighetsIndex, 
			fastighetsObjekt
		)
	else
		dim trovärdighetsObjekt() as trovärdighetsObjekt
		,tempArray(),x,temp as integer
		
		call skapaMutationer(fastighetsobjekt,användaReningar,UtskriftsObjekt,trovärdighetsObjekt)
					
		for x=1 to ubound(trovärdighetsobjekt)
		
			temp = FillerOrSwerefObjekt(trovärdighetsobjekt(x).fx,FastighetsObjekt.swerefobjekt(),swerefTokenOrObjekt)
			temp = FillerOrEnskiltObjekt(trovärdighetsobjekt(x).ex,FastighetsObjekt.enskiltobjekt(),enskiltTokenOrObjekt)
			temp = FillerOrReningObjekt(trovärdighetsobjekt(x).rx,FastighetsObjekt.reningsobjekt(),reningTokenOrObjekt)
							
			call utskrivningsobjektsKonstruktor(
				swerefTokenOrObjekt(1) 
				reningTokenOrObjekt(1)
				enskiltTokenOrObjekt(1)
				UtskriftsObjekt(),
				användaReningar,
				trovärdighetsobjekt(x).index, 
				fastighetsObjekt
			)
		next
		
	end if	

end sub

function ReningÄrInteToken(reningsTokenObjekt as reningsobjekt) as logical
	
	dim tempboolean as logical
		
	tempBoolean = (",,,0,,0,,,,,0" <> ReningAsString(reningsTokenObjekt))
	
	ReningÄrInteToken = tempBoolean
	
end function

function EnskiltÄrInteToken(enskiltTokenObjekt as enskiltObjekt) as logical
	
	dim tempbolean as logical
	,tempstring as string
	tempstring = enskiltAsString(enskiltTokenObjekt)
	tempbolean = tempstring <> ",,,0,,,0,,0,,0,,,0,,,,," AND tempstring <> ",,,,,,,,,0"
	EnskiltÄrInteToken = tempbolean
	
end function

function ReningAsString(reningsObjekt as reningsobjekt) as String

dim tempString,TempArray() as string
,loopvar as integer
	
	tempString = reningsObjekt.spatialFastighet
	& "," & reningsObjekt.spatialShift
	& "," & reningsObjekt.Fastighet_rening
	& "," & reningsObjekt.Antal_hushåll_rening
	& "," & reningsObjekt.Reningstyp
	& "," & reningsObjekt.Storlek_m2
	& "," & reningsObjekt.kordinater
	& "," & reningsObjekt.Beslut_datum
	& "," & reningsObjekt.Utförd_datum
	& "," & reningsObjekt.Kommentarer
	& "," & reningsObjekt.rowIndex
	
	for loopvar=1 to ubound(reningsObjekt.Anslutna_fastigheter)
		call addStringToArrayAsifSet(TempArray,reningsObjekt.Anslutna_fastigheter(loopVar))' reference index
	next
		
	ReningAsString = tempString & iif(ubound(TempArray) = 0, "",StringArrayAsString(TempArray))

end function

sub messageEveryString(StringArray() as String)
	
	Dim	i As Integer
		
		for i = 1 To Ubound(StringArray)
			print "*" & StringArray(i) & "*"
		Next
	
end sub

function enskiltAsString(enskiltObjekt as EnskiltObjekt) as string

	dim tempstring as string
	
	tempstring = enskiltObjekt.Diarienummer
	& "," & enskiltObjekt.Fastighet_tillstånd 
	& "," & enskiltObjekt.Typ_byggnad 
	& "," & (enskiltObjekt.Antal_hushåll_tillstånd )
	& "," & enskiltObjekt.Fastighet_rening 
	& "," & enskiltObjekt.Typ_Slamavskiljare 
	& "," & enskiltObjekt.Storlek_m3
	& "," & enskiltObjekt.Typ_rening 
	& "," & enskiltObjekt.Storlek_m2
	& "," & enskiltObjekt.Typ_sluten_tank 
	& "," & enskiltObjekt.Storlek__m3
	& "," & enskiltObjekt.Beslut_datum 
	& "," & enskiltObjekt.Utförd_datum 
	& "," & enskiltObjekt.Avgift
	& "," & enskiltObjekt.Tillstånd_giltigt_tom 
	& "," & enskiltObjekt.Anteckningar 
	& "," & enskiltObjekt.spatialFastighet 
	& "," & enskiltObjekt.spatialShift 
	& "," & enskiltObjekt.kordinater

enskiltAsString = tempstring

end function

function swerefAsString(swerefTokenObjekt as swerefObjekt) as string

	dim tempString as string
	
	tempString = swerefTokenObjekt.FASTIGHET
	& "," & swerefTokenObjekt.Fastighet_tillstånd
	& "," & swerefTokenObjekt.Ärendenr
	& "," & swerefTokenObjekt.Beslut_datum
	& "," & swerefTokenObjekt.Status
	& "," & swerefTokenObjekt.Utskick1_datum
	& "," & swerefTokenObjekt.Anteckning
	& "," & swerefTokenObjekt.utförddatum
	& "," & swerefTokenObjekt.slamhämtning
	& "," & swerefTokenObjekt.Antal_byggnader

	swerefAsString = tempstring
end function

function swerefÄrInteToken(swerefTokenObjekt as swerefObjekt) as logical
		
	dim tempboolean as logical
	
	tempBoolean = (",,,0,,0,,,,,0" <> swerefAsString(swerefTokenObjekt) AND ",,,,,,,,,0" <> swerefAsString(swerefTokenObjekt))
	
	swerefÄrInteToken = tempBoolean

end function

function countFasGenerateUtvald(FastighetB as string) as integer
	dim tempcountz as integer
	
	select * from Fastighet_yta where kir = fastighetB into utvaldFastighet
	
	countFasGenerateUtvald = countRows(utvaldFastighet)
end function

function getCOrd(byVal ColumnName as string) as string 'förväntar sig endast ett object av samma typ
	
	dim tempAlias as alias
	tempAlias = ColumnName
	dim tempInteger as integer
	
	select * from urval where not(tempAlias = "") into objUrval
	tempInteger = tableInfo(objUrval,8)
		
	if tempInteger > 0 then
		onError goto noCordError	
		fetch first from objUrval
		getCOrd =  ObjectGeography(objUrval.obj,1) & "," & ObjectGeography(objUrval.obj,2)
	end if

exit function
noCordError:
	print tempInteger & " :rader, " & error$()
end function

function kollaBredd(values() as string) as logical

	kollaBredd = true
	dim x as integer

	for x = 1 to ubound(values)
		select col2 from referenceTable where col1 = x into bucketSize
			fetch first from bucketSize
		if(bucketSize.col1 < len(values(x))) then
			kollaBredd = false
		end if
	next

end function

function countDupes(byVal fastighetsBet as string) as integer

dim hasDupes,x as integer

		select * from sammanfogadtabell where Besöksadress_Huvudfastighet = FastighetsBet into urval
		For x=1 to TableInfo(urval, TAB_INFO_NCOLS)
     		if(countOccurences(ColumnInfo(urval, "col"+str$(x), COL_INFO_NAME))> 1) then
     			hasDupes = hasDupes + 1
     		end if
		Next

countDupes = hasDupes
end function

function countOccurences(byVal colummn as string) as integer
	
	Dim query As String
	dim tempAlias as alias
	tempAlias = "urval." & colummn
	
	onError goto QueryError
	
	select tempAlias from urval where not(tempAlias & "" = "0" or tempAlias & "" = "") group by tempAlias into tempcolumnFiltered
	
	fetch first from tempcolumnFiltered
	countOccurences = tableInfo(tempcolumnFiltered,8)	
exit function
	QueryError:
		print query & "]countOccurences[" & Error$()
		countOccurences = 0
end function

sub skapaMutationer(fastighetsobjekt as fastighetsobjekt,användaReningar as integer,UtskriftsObjekt() as utskriftsobjekt,tolkningsobjekt() as trovärdighetsobjekt)

	dim enskiltItterator,i,mestTrov,enskiltEjTagna(),reningEjTagna(),swerefEjTagna(),temparray(),temp as integer
	,enskiltTokenOrObjekt(),enskiltTokenObjekt() as enskiltObjekt
	,reningTokenOrObjekt(),reningsTokenObjekt() as reningsobjekt
	,swerefTokenOrObjekt(),swerefTokenObjekt() as swerefobjekt
	,trovärdighetsobjekt() as trovärdighetsobjekt
	,objektKvarAttKonstruera,debugg as logical
	,högstaIn,trovärdighetsIndex as float 

	for i=1 to ubound(FastighetsObjekt.reningsobjekt)
		call addIntToArrayAsifSet(reningEjTagna,i)' reference index
	next
		
	for i=1 to ubound(FastighetsObjekt.enskiltObjekt)
		call addIntToArrayAsifSet(enskiltEjTagna,i)
	next
		
	for i=1 to ubound(FastighetsObjekt.swerefobjekt)
		call addIntToArrayAsifSet(swerefEjTagna,i)
	next
	
	debugg = (fastighetsobjekt.kir = "ALA OLLAJVS 1:17")
	
if(debugg) then
	dim Dbx as integer
	print "|R" & ubound(FastighetsObjekt.reningsobjekt) & "|E" & ubound(FastighetsObjekt.enskiltObjekt) & "|S" & ubound(FastighetsObjekt.swerefobjekt)
	
	print "-------------------rening"
	for Dbx=1 to ubound(FastighetsObjekt.reningsobjekt)
		print Dbx & " " & ReningAsString(FastighetsObjekt.reningsobjekt(Dbx))
	next
	print "-------------------enskilt"
	for Dbx=1 to ubound(FastighetsObjekt.enskiltObjekt)
		print Dbx & " " & EnskiltAsString(FastighetsObjekt.enskiltObjekt(Dbx))
	next
	print "-------------------sweref"
	for Dbx=1 to ubound(FastighetsObjekt.swerefobjekt)
		print Dbx & " " & SwerefAsString(FastighetsObjekt.swerefobjekt(Dbx))
	next
	
end if
	
	do	'denna sektion skapar alla möjliga förslag på kominationer.
		dim EnsObjInx, fx, rx,tx,antalTrovärdsObjekt,antalAnläggningar,NrEejtagna,NrSejtagna,sfv,env,rnv,St,Et,Rt as integer
		
		NrEejtagna = ubound(enskiltEjTagna)
		NrSejtagna = ubound(swerefEjTagna)
		
		tx = 0	EnsObjInx=1	fx=1 rx=1
		
		do
			do
				do
					St = ubound(swerefEjTagna)
					Et = ubound(enskiltEjTagna)
					Rt = ubound(reningEjTagna)
					tx = tx +1
					
					redim trovärdighetsobjekt(tx)
					
					if(st<>0 AND not(st<fx)) then
						sfv = swerefEjTagna(fx)
					else
						sfv = st
					end if
										
					if(not(Et<ensObjInx) AND (Et<>0)) then
						env = enskiltEjTagna(ensObjInx)
					else
						env = Et
					end if
					
					if(Rt<>0) AND not(Rt<rx) then
						rnv = reningEjTagna(rx)
					else
						rnv = Rt					
					end if
					
					trovärdighetsobjekt(tx).fx = FillerOrSwerefObjekt(sfV,FastighetsObjekt.swerefobjekt(),swerefTokenOrObjekt)
					trovärdighetsobjekt(tx).ex = FillerOrEnskiltObjekt(enV,FastighetsObjekt.enskiltobjekt(),enskiltTokenOrObjekt)
					trovärdighetsobjekt(tx).rx = FillerOrReningObjekt(rnv,FastighetsObjekt.reningsobjekt(),reningTokenOrObjekt)

					trovärdighetsobjekt(tx).index = trovärdighetsIndexer(användaReningar,swerefTokenOrObjekt(1),reningTokenOrObjekt(1),enskiltTokenOrObjekt(1))
					rx=rx+1
					
if(debugg) then
	print trovärdighetsobjekt(tx).fx & ";" & trovärdighetsobjekt(tx).ex & ";" & trovärdighetsobjekt(tx).rx
end if
					
				loop while rx < Rt
				fx=fx+1
			loop while fx < NrSejtagna
			EnsObjInx=EnsObjInx+1
		loop while EnsObjInx < NrEejtagna

if(debugg) then
	print fastighetsobjekt.kir & "|totalt" & ubound(trovärdighetsobjekt)
end if
	
		'Denna sektions syfte är att välja ut ett objekt som har högst trovärdighet
		for i=1 to ubound(trovärdighetsobjekt)
			if((i = 1) OR trovärdighetsobjekt(i).index > högstaIn) then
				mestTrov = i
				högstaIn = trovärdighetsobjekt(i).index
			end if	
		next
		
		print fas.postort 'to halt eternal loops
if(debugg) then			
	print "|taget" & högstaIn & "|nr" & mestTrov
	print "|R" & ReningAsString(FastighetsObjekt.reningsobjekt(trovärdighetsobjekt(mestTrov).rx)) & "|E" & enskiltAsString(FastighetsObjekt.enskiltObjekt(trovärdighetsobjekt(mestTrov).ex)) & "|S" & swerefAsString(FastighetsObjekt.swerefobjekt(trovärdighetsobjekt(mestTrov).fx))
end if

		'denna sektion stoppar det mest trovärdiga objektet i returnarrayn
		'om varken enskilt eller sweref finns, görs inget returnobjekt
		if(NrEejtagna + nrSejTagna <> 0) then 
			temp = ubound(tolkningsobjekt)+1
			redim tolkningsobjekt(temp)
			tolkningsobjekt(temp).rx = trovärdighetsobjekt(mestTrov).rx
			tolkningsobjekt(temp).ex = trovärdighetsobjekt(mestTrov).ex
			tolkningsobjekt(temp).fx = trovärdighetsobjekt(mestTrov).fx
			tolkningsobjekt(temp).index = trovärdighetsobjekt(mestTrov).index
		end if

if(debugg) then
	print trovärdighetsobjekt(mestTrov).rx & " Rremoving from"
	print DebuggStringEveryInt(reningEjTagna)
end if
		
		'denna sektion tar bort de delar som använts i övre delen
		if(trovärdighetsobjekt(mestTrov).rx <> 0) then
			call removeFromIntArray(reningEjTagna(),trovärdighetsobjekt(mestTrov).rx)
		end if

if(debugg) then
	print DebuggStringEveryInt(reningEjTagna)
	print trovärdighetsobjekt(mestTrov).ex & " Eremoving from"
	print DebuggStringEveryInt(enskiltEjTagna)
end if
		
		if(trovärdighetsobjekt(mestTrov).ex <> 0) then
			call removeFromIntArray(enskiltEjTagna(),trovärdighetsobjekt(mestTrov).ex)
		end if

if(debugg) then
	print DebuggStringEveryInt(enskiltEjTagna)
	print trovärdighetsobjekt(mestTrov).fx & " Sremoving from"
	print DebuggStringEveryInt(swerefEjTagna)
end if
		if(trovärdighetsobjekt(mestTrov).fx <> 0) then
			call removeFromIntArray(swerefEjTagna(),trovärdighetsobjekt(mestTrov).fx)
		end if

if(debugg) then
	print DebuggStringEveryInt(swerefEjTagna)
end if
		
		NrEejtagna = ubound(enskiltEjTagna)
		NrSejtagna = ubound(swerefEjTagna)
		redim trovärdighetsobjekt()'töm trovärdighetsobjekten så de kan återskapas.
	loop while ((NrSejtagna+NrEejtagna) <> 0)

end sub

function DebuggStringEveryInt(IntArray() as integer) as string
	
	Dim	i As Integer
		
		for i = 1 To Ubound(IntArray)
			print "[" & IntArray(i) & "]"
		Next
	
end function
