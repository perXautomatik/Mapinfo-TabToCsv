Include "MapBasic.def"
Include "tabellInsammlare.def"

function tidsdialog(i as integer, y as integer,total as integer) as integer
	dim textTemp as string
	dim tidsbegränsning,number as integer
	
	number = Y/(i+0.001)
	Set Format Number "local"
		
	textTemp = "poster: " & i & " (" & number & "/per post) " & y/60 & " minuter," & (i+0.001)/total*100 & "%"
	Dialog
		control statictext title textTemp
		
		Control EditText into tidsbegränsning value 60
		
		Control OKButton
		Control Cancelbutton
		 
		If not(CommandInfo(CMD_INFO_DLG_OK)) Then
			tidsdialog = 0
			Exit Sub
		else
			tidsdialog = Timer() + tidsbegränsning
		end if

end function

sub columnAssosiation(tableName as alias,värde() as string,påPlatts() as string)
	do case TableInfo(tableName, 4)'beroende på hur många kolumner
		case 10 'sweref			
			call DoSweref(värde,påPlatts)
		case 17  'rening
			call knytReningQueryFriendly(värde,påPlatts)
		case 16  'enskiljt
			call DoEnskiljt(värde,påPlatts)
		end case
end sub

sub PivotablecolumnAssosiation(tableName as alias,värde() as string,påPlatts() as string)
	do case TableInfo(tableName, 4)'beroende på hur många kolumner
		case 10 'sweref			
			call PivotableDoSweref(värde,påPlatts)
		case 17  'rening
			call PivotableDoRening(värde,påPlatts)
		case 16  'enskiljt
			call PivotableDoEnskiljt(värde,påPlatts)
		end case
end sub

sub DoSweref(värde() as string,påPlatts() as string)
	dim qM as string
	qM = chr$(34)
	
	call knyt_sColumn_TillRessultatTabellsColumn_(qM & "[" & qM &"& Col3 & " & qM & "] " & qM & " & Col7","Anteckning",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col11","Besöksadress_Huvudfastighet",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col4","flik_Avloppsanläg_Beslutsdatum",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col8","flik_Avloppsa_Besiktningsdatum",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col5","Inventeringsinformation_Status",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col6","Inventeringsinformation_Datum",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col12","Besöksadress_Adress",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col13","Besöksadress_Postnr",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col14","Besöksadress_Ort",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col15","FNR",värde,påPlatts)	

end sub

sub PivotableDoSweref(värde() as string,påPlatts() as string)
	dim qM as string
	qM = chr$(34)
	
	call knyt_sColumn_TillRessultatTabellsColumn_(qM & "[" & qM &"& Col3 & " & qM & "] " & qM & " & Col7","Anteckning",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col11","Besöksadress_Huvudfastighet",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col4","flik_Avloppsanläg_Beslutsdatum",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col8","flik_Avloppsa_Besiktningsdatum",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col5","Inventeringsinformation_Status",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col6","Inventeringsinformation_Datum",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col12","Besöksadress_Adress",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col13","Besöksadress_Postnr",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col14","Besöksadress_Ort",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col15","FNR",värde,påPlatts)	

end sub

sub PivotableDoRening(värde() as string,påPlatts() as string)
	dim qM as string
	qM = chr$(34)
	
	call knyt_sColumn_TillRessultatTabellsColumn_("Col19","Besöksadress_Huvudfastighet",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col3","AnlförEfterR_Anläggningstyp",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col4","Anläggning_för_EfTR_Toaletttyp",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col2","Anl_för_EftR_TöInterv_mån",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col1 & " & qM & "," & qM & " & Col8 & " & qM & "," & qM & " & Col9 & " & qM & ","	
	 & qM & " & Col10 & " & qM & "," & qM & " & Col11 & " & qM & "," & qM & " & Col12 & " & qM & ","	
	 & qM & " & Col13 & " & qM & "," & qM & " & Col14 & " & qM & "," & qM & " & Col15 & " & qM & "," & qM & " & Col16","fliken_Fastigheter",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col7","Anläggning_för_EfterföljRText",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_(qM & "Efterföljande rening"& qM,"PunkttypER",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col18","AnlF_efR_Koordinater_X_o_Y",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("col20","Besöksadress_Adress",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("col21","Besöksadress_Postnr",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("col22","Besöksadress_Ort",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col23","FNR",värde,påPlatts)

end sub

sub PivotableDoEnskiljt(värde() as string,påPlatts() as string)
	dim qM as string
	qM = chr$(34)
	
	call knyt_sColumn_TillRessultatTabellsColumn_(qM & "[" & qM &"& Col1 & " & qM & "] " & qM & " & Col16","Anteckning",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("col18","Besöksadress_Huvudfastighet",värde,påPlatts)'kir
	call knyt_sColumn_TillRessultatTabellsColumn_("Col3","flik_Avloppsänlaggni_Boendetyp",värde,påPlatts)'typ_byggnad
	call knyt_sColumn_TillRessultatTabellsColumn_("Col4","flik_Avloppsa_Avrinningsområde",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col6","Anläggning_för_S_Anläggningstyp",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col7","Anläggning_för_Slam_Toaletttyp",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col8","AnlförEfterR_Anläggningstyp",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col9","Anläggning_för_EfTR_Toaletttyp",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col10","Anläggning_fö_SCertifieringstyp",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col11","Anläggning_för_Slamav_Volym_m3",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col12","flik_Avloppsanläg_Beslutsdatum",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col13","flik_Avloppsa_Besiktningsdatum",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col15","flik_Avloppsanläggn_Byggnadsår",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col5","Anläggning_för_EfterföljRText",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col17","Fliken_Koordinater",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_(qM & "Ansluten byggnad"& qM,"PunkttypAB",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("col19","Besöksadress_Adress",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("col20","Besöksadress_Postnr",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("col21","Besöksadress_Ort",värde,påPlatts)
	call knyt_sColumn_TillRessultatTabellsColumn_("Col22","FNR",värde,påPlatts)

end sub

function getColumnsOfTable_asString(ByVal tableName as string) as string
	dim qM,tableColumns as string
	dim x as integer
	dim tempAlias as alias
	
	qM = chr$(34)
	tempAlias = tableName
	
	For x=1 to TableInfo(tempAlias, TAB_INFO_NCOLS)
	    
	   if(ColumnInfo(tempAlias, "col"+str$(x), COL_INFO_NAME) like "ObjectGeography%") then
	    	tableColumns = tableColumns & "col"+str$(x)
	    else
	    	tableColumns = tableColumns + ColumnInfo(tempAlias, "col"+str$(x), COL_INFO_NAME) 
	    end if
	    
	    if (x < TableInfo(tempAlias, TAB_INFO_NCOLS)) then
	    	tableColumns = tableColumns + ","
	    end if
	Next
	
	getColumnsOfTable_asString = tableColumns
end function

Sub getColumnsOfTable_intoArray(ByVal tableName as string,columnNames() as string)
	dim x as integer
	dim tempAlias as alias
	
	tempAlias = tableName
		
	For x=1 to TableInfo(tempAlias, TAB_INFO_NCOLS)
		redim columnNames(x)
	    columnNames(x) = ColumnInfo(tempAlias, "col"+str$(x), 1) 
	Next
		
end sub

sub insertToTable(byVal tablePaths as string)
	dim qM,påPlatts(1),värde(1),Query as string
	qM = chr$(34)

	call SpatialPailing(tablePaths)
	dim tempAlias as alias
	tempAlias = "TableOfChoise"
	call PivotablecolumnAssosiation(tempAlias,Värde(),påPlatts())
			
	query = "Insert Into sammanfogadTabell (" & arrayAsStringIgnoreEmpty(påPlatts) & ") Select " & arrayAsStringIgnoreEmpty(värde) & " From TableOfChoiseKir DropIndex Auto"
	
	onError goto printError
		run command query
	onError goto 0
	
	close table TableOfChoiseKir
	
exit sub

printError:
	print error$()
	print query
	
End Sub

sub knyt_sColumn_TillRessultatTabellsColumn_(byVal MedVärde as string,byVal påPosition as string,värde() as string,påPlatts() as string)
	
	dim posx as integer
	posx = ubound(värde)+1
	
	redim värde(posx)
	redim påPlatts(posx)
	
	värde(posx)= MedVärde
	påPlatts(posx) = påPosition

end sub

function arrayAsStringIgnoreEmpty(tableX() as string) as string
	dim x as integer
	dim returnString as string
	
	For x=1 to UBOUND(tableX)
 
 		if(not(tableX(x) = "")) then
	 		returnString = returnString + tableX(x)
	    	
	    	if(x < UBOUND(tableX)) then
	    		returnString = returnString & ","
	    	end if
	    end if
	Next
	
	arrayAsStringIgnoreEmpty = returnString
End Function

sub closeAllBut(tableNames() as string)
	dim CopyOfTableNotToClose(),openTables(),theOpenTable as string
	dim i,j,k,NrOfTablesNotToClose as integer	

	call GetOpentables(openTables())
	
	NrOfTablesNotToClose = ubound(tableNames)+1
	ReDim CopyOfTableNotToClose(NrOfTablesNotToClose)	
	CopyOfTableNotToClose(NrOfTablesNotToClose) = "PathTABLE"
	
	for K = 1 to NrOfTablesNotToClose-1
		CopyOfTableNotToClose(K) = tableNames(K)
	Next	
	
	restartLoop:
	for i = 1 to NumTables()
		theOpenTable = openTables(i)
		
		for j = 1 to NrOfTablesNotToClose
			if(theOpenTable = CopyOfTableNotToClose(j)) then
				theOpenTable = ""
				j = NrOfTablesNotToClose
			end if
		next
		
		onError goto errorx
			if not(theOpenTable = "") then
				close table theOpenTable
			end if
		onError goto 0	
	next

if(false) then
	errorx:
		call GetOpentables(openTables())
	resume restartLoop
end if
	
End Sub

sub opentable(TableArray() as String)
	Dim i as integer
	Dim j as integer
	i = NumTables()
	
	ReDim TableArray(i)
	For j = 1 to i
	    TableArray(j) = Tableinfo(j, TAB_INFO_NAME)
	Next

End sub

sub GetOpentables(TableArray() as String)
	Dim j as integer
	
	ReDim TableArray(NumTables())
	For j = 1 to NumTables()
	    TableArray(j) = Tableinfo(j, TAB_INFO_NAME)
	Next
End sub

sub openSingleTable(byVal tableName as string)
	dim tempArray(1) as string
	tempArray(1) = tableName
	call tableOpener(tempArray)
end sub

sub tableOpener(tableNames() as string)
	dim i as integer	
	dim thePathHasNoFile as logical
	dim filePath as string
	
	for i = 1 to ubound(tableNames)
		if tableDoesntExist(tableNames(i)) then 'the table isn't open
			
			select * from PathTABLE where tableNames(i) = TableName into selection2 noSelect
			
			if TableInfo(selection2,TAB_INFO_NROWS) = 0 then 'if there is no path for requested tablename
				call printEveryString(tableNames)'debug
				print "there is no path for requested tablename: " & tableNames(i)
			
			else 'there is a row entry
				select alternative,tablePath from PathTABLE where tableNames(i) = TableName into selection4 noSelect
				Fetch First From selection4
				
				filePath = selection4.tablePath
				
				thePathHasNoFile = (fileExists(selection4.tablePath) = false)
				if thePathHasNoFile then
					dim tablenames2(1) as string
					print selection4.tablePath
					tablenames2(1)= selection4.alternative 'call for alternative
					call tableopener(tablenames2)
					
					Commit Table tablenames2(1) As selection4.tablePath TYPE NATIVE Charset "WindowsLatin1"
					close table tablenames2(1)		
				end if
			
				Open Table filePath as tableNames(i)			
				close table selection4	
			end if
			close table selection2
		end if	
		
	Next
	close table selection
	
	
End Sub

'********************************************************************************************************************
'* Function:TableDoesntExist
'* Date: 1/06/2005
'* Author: Chris DiGiuseppe
'* Checks to make sure the table exists in the workspace.
'********************************************************************************************************************k
Function TableDoesntExist (table_name As String) As Logical

		Dim lcv,num_tables as SmallInt

		num_tables = numTables()
		TableDoesntExist = 1

		For lcv = 1 to num_tables
			If table_name = tableInfo(lcv,TAB_INFO_NAME) Then
				TableDoesntExist = 0
				Exit Sub
			End If
		Next

	End Function

	'********************************************************************************************************************
'* Function:CheckTable
'* Date: 1/06/2005
'* Note: Chris DiGiuseppe
'* Checks to make sure that a table is valid and may be used by the program
'********************************************************************************************************************
Function CheckTable (table_name As String) As Logical
		OnError GoTo ErrorOccured
		CheckTable = 1

		If tableInfo(table_name,TAB_INFO_NCOLS) = 0 Or tableInfo(table_name,TAB_INFO_NROWS) = 0 Then
			CheckTable = 0
		ElseIf tableInfo(table_name,TAB_INFO_SEAMLESS)	Then '**Checks if table is seamless
			CheckTable = 0
		ElseIf table_name = "Delete_Duplicates_GroupBy_Table" OR table_name like "InternalTable%" Then
			CheckTable = 0
		End If
	ErrorOccured:
	End Function
	
sub cleanUpFormerSession
	dim tempboolean as logical
	dim tempCountz as integer
	tempboolean = CommitEveryTable()
	'close every window recursivly, for each iteration checking number of windows and closing the relativly last open, without closing the underlying table.
	for TempCountZ = 1 to NumWindows()
		Close Window WindowID(NumWindows()) 
	next
	
end sub

sub printEveryString(StringArray() as String)
	
	Dim	i As Integer
		
		for i = 1 To Ubound(StringArray)
			print "*" & StringArray(i) & "*"
		Next
	
	end sub
	
Function CommitEveryTable() as logical
		Dim num_tables,lcv,num AS SmallInt
		Dim tname As String
		Dim tableName as Alias
		Dim tempLogics as Logical

		num = 1
		num_tables = NumTables()
		
		OnError GoTo ErrorOccured
		
		If num_tables > 0 Then
			For lcv = 1 to num_tables									'**gets the name of each table and adds it to the array
				tname = TableInfo(lcv,TAB_INFO_NAME)
				tableName = tname
				tempLogics = CheckTable(tname) = 1
				If tempLogics Then							'**Checks to see if table is valid
					Commit table tableName
					num = num + 1
				End If
				If CheckTable(tname) = 0 Then							'**If table is invalid,does not advance place in array
					num = num
				End If
			Next
		End If
	ErrorOccured:
	CommitEveryTable = true
	End Function


'----------------------------------------------------------------
Sub Wait3Seconds

	Print "Waiting for 3 seconds"
	
	Dim iCurrentTime, iElapsedTime, iWaitTime as Float
	
	iCurrentTime = Timer()
	iWaitTime= 3
	
	Do While iElapsedTime <= iCurrentTime + iWaitTime
		iElapsedTime = Timer()
	Loop

End Sub
'----------------------------------------------------------------
Function ReturnTrue() as Logical

	Dim bResult as Logical
	bResult = Ask("Progress is @ step " & iProgress & ". Do you want the progress bar to Contiue or End?", "Continue", "End")
	Print "Return True = " & bResult
	   
	ReturnTrue = bResult

End Function


sub spatialPailing(tablePaths as string)

	Open Table tablePaths  as TableOfChoise
	
	dim tableColumns, Query as string
	dim x as integer
	dim qM,tempstring,radEtt,radTvå as string
	qM = chr$(34)
	
	onerror goto NoObjectError	
	do case TableInfo(TableOfChoise, 4)
		case 10 'sweref
		Select col1,col2,col3,col4,col5,col6,col7,col8,col9,col10 from TableOfChoise into tableOfChoiseXY
	
	case 17  'rening
		
		Select col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14,col15,col16,col17,ObjectGeography(object,1) & "," & ObjectGeography(object,2) "cord" from TableOfChoise into tableOfChoiseXY
		
	case 16  'enskiljt
	
		Select col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14,col15,col16,ObjectGeography(object,1) & "," & ObjectGeography(object,2) "cord" from TableOfChoise into tableOfChoiseXY
	
	end case
	
	tableColumns = getColumnsOfTable_asString("TableOfChoiseXY")
	
	Query = "Select " & tableColumns & ",Fastighet_yta.KIR,Fastighet_yta.ADRESS,Fastighet_yta.POSTNR,Fastighet_yta.POSTORT,Fastighet_yta.FNR from TableOfChoiseXY, Fastighet_yta where TableOfChoiseXY.obj within Fastighet_yta.obj into tableOfChoiseKir"
	run command query
	onError goto 0

exit sub

NoObjectError:
	print "NoObjectError:" & error$()

end sub

'sub attemptSlowInsert(påPlatts() as string,värde() as string,er as string)

	'
'		if(false) then		
'SlowInsert:
'							
'			dim sisstaPlatts,nästsisstaPlatts as alias
'			,sisstaVärde as string
'			,xy as integer
'				
'			sisstaPlatts = påPlatts(ubound(påPlatts))
'			sisstaVärde = värde(ubound(värde))
'			nästsisstaPlatts = påPlatts(ubound(påPlatts)-1)
'			
'			Insert Into sammanfogadTabell (SisstaPlatts) Select sisstaVärde From TableOfChoiseKir DropIndex Auto
'			
'			for xy = 1 to ubound(påPlatts)-1
'				query = "Add Column " & qm & sammanfogadTabell & qm & " (" & påPlatts(xy) & ") From TableOfChoiseKir Set To " & värde(xy) & " where " & sisstaPlatts & "=" & sisstaVärde & " and " & nästsisstaPlatts & " = " & qm & qm
'				onError goto printError
'					run command query
'				onError goto 0
'			next	
'		end if
'
'continueSub:
'		i = i +1
'
'		reDim anslutna(0)
'		redim värde(0)
'		redim påPlatts(0)
'		
'		fetch next from reningIhopslagen
'	loop
'	print "avslut i förtid:" & avslutsvariabel
'		
'exit sub
'
'queryError:
'	print currentID
'	print "queryError:" & error$()
'resume SlowInsert
'
'printError:
'	print currentID
'	print "SlowInsertError:" & error$()'
'	print query
'	end program
'resume next

'end sub
