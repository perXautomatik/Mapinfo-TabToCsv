Dim tablenames(5),distrikt,FastighetsBetInput,qm as string
,iProgress,iProgressRange,jProgress,jProgressRange,starttime as integer
,reningDistrikt,enskiltDistrikt as alias
dim socken as string

Type ReningsObjekt

	Fastighet_rening as string
	Antal_hushåll_rening as integer
	Reningstyp as string
	Storlek_m2 as float
	Beslut_datum as date
	Utförd_datum as date
	Kommentarer as string
	spatialFastighet as string
	spatialShift as string
	rowIndex as integer
	kordinater as string
	Anslutna_fastigheter() as string

end Type

Type SwerefObjekt

	FASTIGHET as string
	Fastighet_tillstånd as string
	Ärendenr as string
	Beslut_datum as date
	Status as string
	Utskick1_datum as date
	Anteckning as string
	utförddatum as date
	slamhämtning as string
	Antal_byggnader as integer	
	kordinater as string
	SpatialFastighet as string

end Type

Type EnskiltObjekt

	Diarienummer as string
	Fastighet_tillstånd as string
	Typ_byggnad as string
	Antal_hushåll_tillstånd as string
	Fastighet_rening as string
	Typ_Slamavskiljare as string
	Storlek_m3 as float
	Typ_rening as string
	Storlek_m2 as float
	Typ_sluten_tank as string
	Storlek__m3 as float
	Beslut_datum as date
	Utförd_datum as date
	Avgift as integer
	Tillstånd_giltigt_tom as date
	Anteckningar as string
	spatialShift as string
	spatialFastighet as string
	kordinater as string
	
end Type

Type UtskriftsObjekt
	
	trovärdighetsIndex as float

	Besöksadress_Adress as String
	Besöksadress_Postnr as String
	Besöksadress_Ort as String
	Besöksadress_Huvudfastighet as String
	FNR as integer
	 
	Verksamhetsutövare_Namn as String
	Verksamhetsutöv_Person_orgnr as integer
 
	Fakturamottagare_NAMN as String
	Fakturamottagare_Faktura_ADRESS as String
	Fakturamottagare_Faktura_POSTNR as String
	Fakturamottagare_Faktura_POSTOR as String
 
	Enhet as String
	Anteckning as String
	Aktuell_timavgift as integer
	Timdebitering as Logical
	Objektnamn as String

	flik_Avloppsänlaggni_Boendetyp as String
	flik_Avloppsanläggn_Byggnadsår as date
	flik_Avloppsa_Besiktningsdatum as date
	flik_Avloppsanläg_Beslutsdatum as date
	Vatten as String
  
	Recipient as String

	Inventering as String
	Inventeringsinformation_Datum as date
	Inventeringsinformation_Status as String
	Bedömning as String
  
	fliken_Fastigheter as String
	fliken_Fastigheter_FNR as integer

	PunkttypAB as String
	Fliken_Koordinater as String

	fliken_Ärenden as String

	Anläggningskategori as String
	besiktningdatum as date
	beslutsdatum as date
	Anläggningstyp as String
	Volym_m3 as float
	Anl_för_EftR_TöInterv_mån as integer
	AnlF_efR_Koordinater_X_o_Y as String
	PunkttypER as String
	Anläggning_för_EfterföljRText as String

	Anläggningskategori_2 as String
	Anläggning_för_S_Anläggningstyp as String
	Externt_Tjänsteid as String
	text as String
	Anläggning_för_Slamav_Volym_m3 as float
	
	Anläggningskategori_3 as String
	AnlförEfterR_Anläggningstyp as String
	besiktningdatum_2 as date
	beslutsdatum_2 as date
	Externt_Tjänsteid_2 as String
	Volym_m3_2 as float

	Objektid as integer
	Path as String
	Diarienummer as String
	Löpnummer as integer



	sql as string
	reningsindex as integer
	
end Type

Type FastighetsObjekt
	
	fastighet as string
	fnr as integer
	
	swerefobjekt() as SwerefObjekt
	reningsobjekt() as reningsObjekt
	enskiltobjekt() as enskiltObjekt
	
	adress as string
	postnr as string
	ort as string
	kir as string
			
	namn as string
	personnr as integer

	adressNamn as string
	PostNrNamn as string
	PostortNamn as string
	
End Type

Type TrovärdighetsObjekt
	index as float
	ex as integer
	fx as integer
	rx as integer
End Type

declare sub populatePathTable 'own defenition for class, no possibility to generalize

	' hur vet vi att en gemensam rening redan refferats till?
	' skapar att objekt enligt rutin för gemensamhetanläggningar, samt att vi lägger till det radindex
	' när vi sedan är påväg att skapa ett gemensamhetsobjekt i ressultattabellen, skippar vi att skapaom rOet
	' om index redan finns där.
declare sub utskrivningsobjektsKonstruktor(
		swerefobjekt as swerefobjekt,
		reningsobjekt as reningsobjekt,
		enskiltobjekt as enskiltobjekt,
		UtskriftsObjekt() as UtskriftsObjekt,
		användaReningar() as integer,
		trovärdighetsIndex as float,
		fastighetsObjekt as fastighetsObjekt
	)
	
declare function trovärdighetsIndexer(
	användaReningar() as integer,
	swerefobjekt as swerefobjekt,
	reningsobjekt as reningsobjekt,
	enskiltobjekt as enskiltobjekt
	) as float

		
	'är det för krävande att hämta poster enligt index?
	'FastighetsBetInput = columnAtIndexAsString(temp,tempString,iprogress)

	'gissar vilket distrikt som fastighet hör till som skall öppnas
	'nödvändigt för att spara tid?'''ja det är nödvändigt, fundera på att skära ner i ännu mindre delar.
	'bit nedskärning gjorde väldigt liten tidskillnad gemnförelse att förindexera alla sökvariabler.

declare sub inläsning(fastighetsobjekt() as FastighetsObjekt,tempAlias3() as enskiltObjekt,tempAlias2() as reningsobjekt,tempAlias1() as swerefObjekt)
declare sub tolkning(FastighetsObjekt as FastighetsObjekt, UtskriftsObjekt() as UtskriftsObjekt,användaReningar() as integer)

'även ifall man "pregenerating area" tar hela processen fortfarande väldigt lång tid, frågan är om skulle kunna förindexera alla fastigheter
'ty varjer within+within+within tar längretid än en tre gånger så stor within.
declare function findInINTArray(byVal värde as integer, array() as integer) as logical

declare function findInStringArray(byVal värde as string, array() as string) as logical

'ääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääääää
'när en matchning gjorts, ta bort delarna från ittarationen
'gör ny matchning på resterande.
'önskade mutationer är ihopparade ressultat, samt de ej assosicerade bitarna för sig
'önskade mutationer är ihopparade ressultat, samt de ej assosicerade bitarna för sig
' tex om en enskilt som inte har en rening att matcha denne
' tex en sweref som inte har en enskilt att matcha med
' dock inga reningar då dessa får tas fram senare.
'	print FastighetsObjekt.fastighet & ":" & ubound(FastighetsObjekt.enskiltobjekt()) & ":" & ubound(FastighetsObjekt.swerefobjekt()) & ":" & ubound(FastighetsObjekt.reningsobjekt())
'
'	if(ubound(fastighetsobjekt.swerefobjekt)>ubound(fastighetsobjekt.enskiltobjekt)) then
'		'make regular mutations
'		'for each beslut pick most accurat
'		'if the is one that's not
'		'make a mutation where only sweref left
'		'the mutation with the swerefobjekt who have the highest match get picked
'	end if
'	
'	if(ubound(fastighetsobjekt.reningsobjekt)>ubound(fastighetsobjekt.enskiltobjekt)) then
'		'the mutation with the rening who have the highest match get picked
'	end if
			'när högst trovärdighet valts ut, skapas ett utskriftsobjekt			
			'			print ubound(FastighetsObjekt.swerefobjekt) & "fx" '& trovärdighetsobjekt(mestTrov).fx
			'			print ubound(FastighetsObjekt.reningsobjekt) & "rx" '& trovärdighetsobjekt(mestTrov).rx
			'			print ubound(FastighetsObjekt.enskiltobjekt) & "ex" '& trovärdighetsobjekt(mestTrov).ex
			'			print ubound(trovärdighetsobjekt) & "tro " & mestTrov & " tra"
declare sub skapaMutationer(fastighetsobjekt as fastighetsobjekt,användaReningar as integer,UtskriftsObjekt() as utskriftsobjekt, tolkningsobjekt() as TrovärdighetsObjekt)

declare sub removeFromIntArray(array() as integer,värde as integer)

declare function FillerOrSwerefObjekt(intx as integer,swerefobjekt() as swerefobjekt,swerefTokenObjekt() as swerefobjekt) as integer
declare function FillerOrEnskiltObjekt(intx as integer,enskiltobjekt() as enskiltobjekt,enskiltTokenObjekt() as enskiltobjekt) as integer
declare function FillerOrReningObjekt(intx as integer,reningsobjekt() as reningsobjekt,reningsTokenObjekt() as reningsobjekt) as integer
declare function intArrayAsPrintString(tableX() as integer) as string
declare function StringArrayAsString(tableX() as string) as string

declare sub generateTokenObjekts(reningsTokenObjekt() as reningsobjekt, enskiltTokenObjekt() as enskiltObjekt, swerefTokenObjekt() as swerefobjekt)
declare function ReningÄrInteToken(x as reningsobjekt) as logical
declare function EnskiltÄrInteToken(enskiltTokenObjekt as enskiltObjekt) as logical
declare sub FastighetsObjCreation(fastighetsBetInput as string,reningsobjekt() as reningsobjekt,fastighetsObjekt() as fastighetsObjekt,swerefObjekt() as swerefObjekt,enskiltObjekt() as enskiltObjekt)

declare function countFasGenerateUtvald(FastighetB as string) as integer
declare sub insertXintoYtable(ByVal tableToInsert as string,byVal insertWhere as string)
declare function CreateTable_reningIhopslagen as string
declare function CreateTable_EnskiltIhopslagen as string
declare function expandUtskriftsobjekt(utskriftsObjekt() as utskriftsobjekt) as integer

declare function countDupes(byVal fastighetsBet as string) as integer
declare function kollaBredd(values() as string) as logical
declare function getCOrd(byVal ColumnName as string) as string
declare function countOccurences(byVal colummn as string) as integer
declare sub insertXintoYtableWhereXcolLessThaYcol(ByVal tableToInsert as string,byVal insertWhere as string)
declare function sqlPart_ColNrs(byVal nr as integer) as string
declare sub injectGemensamma()
declare sub insertInitialTables()

declare sub fastighetForUtskriftsobjekt(utskriftsObjekt() as utskriftsobjekt,itterator as integer,fastighetsobjekt as fastighetsobjekt,swerefObjekt as swerefobjekt,reningsobjekt as reningsobjekt,enskiltObjekt as enskiltobjekt, objektid as integer)

declare sub diarienummerForUtskriftsObjekt(
	utskriftsObjekt() as utskriftsobjekt,
	itterator as integer,
	enskiltObjekt as enskiltobjekt,
	swerefObjekt as swerefobjekt, 
	objektid as integer
	)

declare Sub NewSocken(byVal nSocken as string,EnskiltObjekt() as enskiltObjekt,reningsObjekt() as reningsObjekt,swerefObjekt() as swerefObjekt)

declare sub presentTime(swerefStart as float,ReningStart as float, EnskiltStart as float, objektCreationStart as float,swerefStop as float,ReningStop as float, EnskiltStop as float, objektCreationStop as float)
declare sub saveProgress(utskriftsObjekt() as utskriftsObjekt,användaReningar() as integer)
declare sub createRessultTableX(byval tablename as string, byval filePath as string)
declare function generateInsertStringWithArray(insertinto as string,värde() as string) as string
declare sub genereraSQLVärdeArray(värde() as string, utskriftsobjekt as utskriftsobjekt)

declare sub doTheDateStandardisation(värde() as string,påPlatts() as string,byVal DatumSträngTagIsammanfogad as string)

declare function DiarieMixedToUnit(byVal text as string) as string
declare function getFnr(ByVal fastighetsNamn as string) as integer

declare sub genereraFastighetsYtaMedFastighetsAdress()

declare sub getAnslutna(anslutan() as string)

declare sub StandardiseraDiarie(byval a as string,byval b as string,c() as string)

Declare Sub Main

declare function enskiltAsString(enskiltTokenObjekt as EnskiltObjekt) as string
declare function ReningAsString(reningsTokenObjekt as reningsobjekt) as string
declare function swerefAsString(swerefTokenObjekt as swerefObjekt) as string

declare function swerefÄrInteToken(swerefObjekt as swerefObjekt) as logical
Declare Sub gemAnslutna(caseString as string,ressultArray() as string)
declare function FirstLeftMostNumber(byVal inputString as string) as integer
declare function FindCharTurncStringByPos(byVal toRemove as string,byVal inputString as string) as string
declare function DiarieUtanBokstäver(ByVal diarienummer as string) as string
declare function IFSAMEoneDIFFRENTzeroONEBLANKhalf(byVal valX as string,byVal valY as string) as float
declare function XOR(byVal a as logical, byVal b as logical) as logical

declare function stringEveryString(StringArray() as String) as string
declare function stringEveryInt(IntArray() as integer) as string

declare function EnskiltFilterByBet(tabloid() as EnskiltObjekt,FastighetsBetInput as String,enskiltObjekt() as EnskiltObjekt) as integer
declare function swerefFilterByBet(tabloid() as swerefObjekt,FastighetsBetInput as String,swerefObjekt() as swerefObjekt) as integer
declare function reningsFilterByBet(ReningAlias() as ReningsObjekt,FastighetsBetInput as String,reningsObjekt() as ReningsObjekt) as integer

declare sub readCurrentState(användaReningar() as integer)
declare function getPathFromPathTable(byVal tableName as string) as string
declare sub sockenProcessor()
declare sub PrepareGemensamma()

declare function SqlGenWhereColIsNotAny(byVal kolName, toFilterBy() as string) as string
declare function ifOpenFetchFirstCol11Asinteger(byVal tableName as string) as integer
declare sub columnAsStringArray(byVal tableName as string,byVal columnName as string, Array() as string)

