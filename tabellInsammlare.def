
declare sub createRessultTable(byVal tableName as string,byVal pathX as string)

declare sub skapaMutationer(en() as enskiltObjekt ,re() as reningsobjekt ,sw() as swerefobjekt,byVal minimumDebt as integer)

declare function InitializeSwerefObjekt(intx as integer,swerefobjekt() as swerefobjekt,swerefTokenObjekt() as swerefobjekt) as integer
declare function InitializeEnskiltObjekt(intx as integer,enskiltobjekt() as enskiltobjekt,enskiltTokenObjekt() as enskiltobjekt) as integer
declare function InitializeReningObjekt(intx as integer,reningsobjekt() as reningsobjekt,reningsTokenObjekt() as reningsobjekt) as integer

declare sub generateTokenObjekts(reningsTokenObjekt() as reningsobjekt, enskiltTokenObjekt() as enskiltObjekt, swerefTokenObjekt() as swerefobjekt)
declare function Rening�rInteToken(x as reningsobjekt) as logical
declare function Enskilt�rInteToken(enskiltTokenObjekt as enskiltObjekt) as logical


declare function countShiftenGenUtvald(FastighetB as string) as integer
declare function CreateTable_reningIhopslagen as string
declare function CreateTable_EnskiltIhopslagen as string
declare function expandUtskriftsobjekt(utskriftsObjekt() as utskriftsobjekt) as integer

declare function countDupes(byVal fastighetsBet as string) as integer
declare function kollaBredd(values() as string) as logical
declare function getCOrd(byVal ColumnName as string) as string
declare function countOccurences(byVal colummn as string) as integer

declare sub injectGemensamma()
declare sub insertInitialTables()


declare sub presentTime(swerefStart as float,ReningStart as float, EnskiltStart as float, objektCreationStart as float,swerefStop as float,ReningStop as float, EnskiltStop as float, objektCreationStop as float)
declare sub createRessultTableX(byval tablename as string, byval filePath as string)
declare sub UtskriftsObjToInsertStringArray(v�rde() as string, utskriftsobjekt as utskriftsobjekt)

declare sub doTheDateStandardisation(v�rde() as string,p�Platts() as string,byVal DatumStr�ngTagIsammanfogad as string)

declare function DiarieMixedToUnit(byVal text as string) as string

declare sub genereraFastighetsYtaMedFastighetsAdress()

declare sub getAnslutna(anslutan() as string)

declare sub StandardiseraDiarie(byval a as string,byval b as string,c() as string)

declare function enskiltAsString(enskiltTokenObjekt as EnskiltObjekt) as string
declare function ReningAsString(reningsTokenObjekt as reningsobjekt) as string
declare function swerefAsString(swerefTokenObjekt as swerefObjekt) as string

declare function sweref�rInteToken(swerefObjekt as swerefObjekt) as logical
Declare Sub gemAnslutna(caseString as string,ressultArray() as string)

declare sub messageEveryString(StringArray() as String)
declare function DebuggStringEveryInt(IntArray() as integer) as string


declare sub PrepareGemensamma()


declare sub enskiltCopyConstruktor(inputX as enskiltObjekt, outputXTable() as enskiltObjekt,byVal outPutItterator as integer)
declare sub reningObjCopyConstr(inputX as ReningsObjekt,OutputTable() as ReningsObjekt,byVal outPutItterator as integer)
declare sub swerefObjektCopyConstr(inputX as swerefObjekt, outputTable() as swerefObjekt,byVal outPutItterator as integer)


declare function EnskiltSubset(inputTable() as EnskiltObjekt,FastighetsBetInput as String,OutputTable() as EnskiltObjekt) as integer
declare function swerefSubset(inputTable() as swerefObjekt,FastighetsBetInput as String,OutputTable() as swerefObjekt) as integer
declare function reningsSubset(inputTable() as ReningsObjekt,FastighetsBetInput as String,OutputTable() as ReningsObjekt) as integer

declare sub saveFastighetsObjektToTable(tableName as string,inputX as fastighetsObjekt,ReningsObjekt() as ReningsObjekt,SwerefObjekt() as SwerefObjekt,EnskiltObjekt() as EnskiltObjekt)
declare sub FastighetsObjCreation(tableName as string,fastighetsBetInput as string,fastighetensReningsobjekt() as reningsobjekt,fastighetensSwerefObjekt() as swerefObjekt,fastighetensEnskiltObjekt() as enskiltObjekt)
declare sub FastighetsObjToInsertStringArray(output() as string, inputx as fastighetsObjekt,ReningsObjekt() as ReningsObjekt,SwerefObjekt() as SwerefObjekt,EnskiltObjekt() as EnskiltObjekt)

declare sub fetchReningByIndex(stringArray() as string,output() as reningsObjekt)
declare sub fetchEnskiltByIndex(stringArray() as string,output() as enskiltObjekt)
declare sub fetchSwerefByIndex(stringArray() as string,output() as swerefObjekt)

declare function EnskiltSubsetByFasgtighet(inputTable() as EnskiltObjekt,FastighetsBetInput as String,OutputTable() as EnskiltObjekt) as integer
declare function swerefSubsetByFasgtighet(inputTable() as swerefObjekt,FastighetsBetInput as String,OutputTable() as swerefObjekt) as integer
declare function reningsSubsetByFasgtighet(inputTable() as ReningsObjekt,FastighetsBetInput as String,OutputTable() as ReningsObjekt) as integer

declare sub ReningSubsetByIndex(supersetTable() as reningsObjekt, indexArray() as string,OutputTable() as reningsObjekt)
declare sub EnskiltSubsetByIndex(supersetTable() as EnskiltObjekt,indexArray() as String,OutputTable() as EnskiltObjekt)
declare sub SwerefSubsetByIndex(supersetTable() as swerefObjekt, indexArray() as string,OutputTable() as swerefObjekt)


declare function getMain(inputString as string, output() as string) as integer

declare function findWhereInStringArray(byVal v�rde as string, array() as string) as integer 

declare sub putAtIndex(arrayTobePutIn() as string,inputString as string,positionX as integer)

declare sub saveUtskriftsProgress(G_utskriftsObjekt() as utskriftsObjekt)

Declare Sub insertAt(
				trodv�dighet as trov�rdighetsobjekt, 'which rows in each table that should be moved
				enskiltTokenObjekt() as enskiltObjekt,
				reningsTokenObjekt() as reningsObjekt,
				swerefTokenObjekt() as swerefObjekt,
				toInsertAt as integer) ' to which place in the table

Declare Sub genTrov�rdighet(trodv�dighet() as trov�rdighetsobjekt,enskiltTokenObjekt() as enskiltObjekt,reningsTokenObjekt() as reningsObjekt,swerefTokenObjekt() as swerefObjekt)
Declare sub initializer(reningsTokenObjekt() as reningsobjekt,enskiltsTokenObjekt() as enskiltObjekt,swerefsTokenObjekt() as swerefobjekt)

Declare Sub subTablesafter( outPutEn() as enskiltObjekt,inputEn() as enskiltObjekt, outPutre() as reningsObjekt,inputre() as reningsObjekt, outPutsw() as swerefObjekt,inputsw() as swerefObjekt, byVal minimumDebt as integer)

Declare sub Avloppsanl�ggning(uObj() as UtskriftsObjekt,ittr as integer,eO as enskiltobjekt)
Declare sub huvudObjekt(uObj() as UtskriftsObjekt, it as integer)
Declare sub samlingsobjekt(uObj() as UtskriftsObjekt,ittr as integer)
Declare sub inventeringsinformation(uObj() as UtskriftsObjekt,ittr as integer,so as swerefobjekt)

Declare sub �renden(uObj() as UtskriftsObjekt,ittr as integer)
Declare sub koordinater(uObj() as UtskriftsObjekt,ittr as integer)
Declare sub Recipient(uObj() as UtskriftsObjekt,eO as enskiltobjekt, rO as reningsobjekt,ittr as integer) 
Declare sub Anl�ggning(uObj() as anl�ggningsobjekt,eO() as enskiltobjekt,rO() as reningsobjekt,sO() as swerefobjekt)

declare sub utskrivningsobjektsKonstruktor(
		sO() as swerefobjekt,
		rO() as reningsObjekt,
		eO() as enskiltobjekt
	)
	
Declare function reningsfastigheterAsString(reningsObjekt as reningsObjekt) as string
 
Declare function anl�ggningsobjektToUtskifts(anl() as Anl�ggningsObjekt,uObj() as UtskriftsObjekt,ittr as integer) as integer

declare function diarienummerForUtskriftsObjekt(
	utskriftsObjekt() as utskriftsobjekt,
	itterator as integer,
	enskiltObjekt() as enskiltobjekt,
	swerefObjekt() as swerefobjekt, 
	objektid as integer
	) as integer


declare sub fastighetForUtskriftsobjekt(utskriftsObjekt() as utskriftsobjekt,itterator as integer,swerefObjekt() as swerefobjekt,reningsobjekt() as reningsobjekt,enskiltObjekt() as enskiltobjekt, objektid as integer)

declare sub anteckningKordinat(sweref as swerefobjekt,ensk as enskiltobjekt,rening as reningsobjekt ,uObj() as utskriftsobjekt, ittr as integer)
Declare function resTabPos(byVal colName as string) as integer

declare function enforceFormat(byVal inputx as string,byVal format as string,byVal lenght as integer) as string
declare function enforceFormTa(byVal inputx as string,byVal col as string) as string

declare function textAppend(byVal initial as string,byVal prefix as string,byVal  appendant as string) as string

